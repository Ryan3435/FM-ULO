//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenItems.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ULOContext : DbContext
    {
        public ULOContext()
            : base("name=ULOContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ChangeLog> ChangeLogs { get; set; }
        public virtual DbSet<imp_March_2014_Accruals> imp_March_2014_Accruals { get; set; }
        public virtual DbSet<tblCodeDefinition> tblCodeDefinitions { get; set; }
        public virtual DbSet<tblDataSource> tblDataSources { get; set; }
        public virtual DbSet<tblDetailsForExcelImport0505> tblDetailsForExcelImport0505 { get; set; }
        public virtual DbSet<tblFS_BudgetActivity> tblFS_BudgetActivity { get; set; }
        public virtual DbSet<tblFS_BusinessLine> tblFS_BusinessLine { get; set; }
        public virtual DbSet<tblFS_ObjectClassCodes> tblFS_ObjectClassCodes { get; set; }
        public virtual DbSet<tblFS_PaidDaysRef> tblFS_PaidDaysRef { get; set; }
        public virtual DbSet<tblFS_PGVXX_Formula> tblFS_PGVXX_Formula { get; set; }
        public virtual DbSet<tblFS_ReportConfig> tblFS_ReportConfig { get; set; }
        public virtual DbSet<tblFS_SumReportStatus> tblFS_SumReportStatus { get; set; }
        public virtual DbSet<tblFS_UserEntryData> tblFS_UserEntryData { get; set; }
        public virtual DbSet<tblFS_UserEntryDataTypes> tblFS_UserEntryDataTypes { get; set; }
        public virtual DbSet<tblFundAllowance> tblFundAllowances { get; set; }
        public virtual DbSet<tblFundAllowanceByOrg> tblFundAllowanceByOrgs { get; set; }
        public virtual DbSet<tblHistoryAction> tblHistoryActions { get; set; }
        public virtual DbSet<tblJustificationValue> tblJustificationValues { get; set; }
        public virtual DbSet<tblLoad> tblLoads { get; set; }
        public virtual DbSet<tblOIAccrualType> tblOIAccrualTypes { get; set; }
        public virtual DbSet<tblOIAccrualTypeAction> tblOIAccrualTypeActions { get; set; }
        public virtual DbSet<tblOIDetail> tblOIDetails { get; set; }
        public virtual DbSet<tblOILease> tblOILeases { get; set; }
        public virtual DbSet<tblOIMain> tblOIMains { get; set; }
        public virtual DbSet<tblOIOrganization> tblOIOrganizations { get; set; }
        public virtual DbSet<tblOIOrganization_double> tblOIOrganization_double { get; set; }
        public virtual DbSet<tblOIRevisedDoc> tblOIRevisedDocs { get; set; }
        public virtual DbSet<tblOISendAttachment> tblOISendAttachments { get; set; }
        public virtual DbSet<tblOIType> tblOITypes { get; set; }
        public virtual DbSet<tblOrganization> tblOrganizations { get; set; }
        public virtual DbSet<tblReasonForDelay> tblReasonForDelays { get; set; }
        public virtual DbSet<tblReassignRequest> tblReassignRequests { get; set; }
        public virtual DbSet<tblReviewFeedback> tblReviewFeedbacks { get; set; }
        public virtual DbSet<tblRole> tblRoles { get; set; }
        public virtual DbSet<tblSentEmail> tblSentEmails { get; set; }
        public virtual DbSet<tblStatusValue> tblStatusValues { get; set; }
        public virtual DbSet<tblTempUser> tblTempUsers { get; set; }
        public virtual DbSet<tblUser> tblUsers { get; set; }
        public virtual DbSet<tblValidationValue> tblValidationValues { get; set; }
        public virtual DbSet<ProcResultsetColumn> ProcResultsetColumns { get; set; }
        public virtual DbSet<tblAssignmentRule> tblAssignmentRules { get; set; }
        public virtual DbSet<tblAttachmentRequirement> tblAttachmentRequirements { get; set; }
        public virtual DbSet<tblBookMonthOrder> tblBookMonthOrders { get; set; }
        public virtual DbSet<tblDetailsForExcelImport> tblDetailsForExcelImports { get; set; }
        public virtual DbSet<tblDetailsForExcelImport_0722> tblDetailsForExcelImport_0722 { get; set; }
        public virtual DbSet<tblDetailsForExcelImport_backup_062015> tblDetailsForExcelImport_backup_062015 { get; set; }
        public virtual DbSet<tblDetailsForExcelImport_bkup> tblDetailsForExcelImport_bkup { get; set; }
        public virtual DbSet<tblDetailsForExcelImport0325> tblDetailsForExcelImport0325 { get; set; }
        public virtual DbSet<tblDocRWA> tblDocRWAs { get; set; }
        public virtual DbSet<tblEmailRequest> tblEmailRequests { get; set; }
        public virtual DbSet<tblEmailStatu> tblEmailStatus { get; set; }
        public virtual DbSet<tblFiles_toDelete> tblFiles_toDelete { get; set; }
        public virtual DbSet<tblFS_CostElementTypes> tblFS_CostElementTypes { get; set; }
        public virtual DbSet<tblFS_DocActionTypes> tblFS_DocActionTypes { get; set; }
        public virtual DbSet<tblFS_SumReportState> tblFS_SumReportState { get; set; }
        public virtual DbSet<tblFundAllowanceByFunc> tblFundAllowanceByFuncs { get; set; }
        public virtual DbSet<tblHistory> tblHistories { get; set; }
        public virtual DbSet<tblMainForExcelImport> tblMainForExcelImports { get; set; }
        public virtual DbSet<tblMainForExcelImport_0722> tblMainForExcelImport_0722 { get; set; }
        public virtual DbSet<tblMainForExcelImport_backup_062015> tblMainForExcelImport_backup_062015 { get; set; }
        public virtual DbSet<tblMainForExcelImport_bkup> tblMainForExcelImport_bkup { get; set; }
        public virtual DbSet<tblMainForExcelImport_New> tblMainForExcelImport_New { get; set; }
        public virtual DbSet<tblMainForExcelImport0325> tblMainForExcelImport0325 { get; set; }
        public virtual DbSet<tblMainForExcelImportBkp> tblMainForExcelImportBkps { get; set; }
        public virtual DbSet<tblMasterOrgCode> tblMasterOrgCodes { get; set; }
        public virtual DbSet<tblOIAccrualTypeDocType> tblOIAccrualTypeDocTypes { get; set; }
        public virtual DbSet<tblOIContact> tblOIContacts { get; set; }
        public virtual DbSet<tblOIDetails_0722> tblOIDetails_0722 { get; set; }
        public virtual DbSet<tblOIDetails_2> tblOIDetails_2 { get; set; }
        public virtual DbSet<tblOIDocAttachment> tblOIDocAttachments { get; set; }
        public virtual DbSet<tblOIMain_0722> tblOIMain_0722 { get; set; }
        public virtual DbSet<tblOIOrganization_0722> tblOIOrganization_0722 { get; set; }
        public virtual DbSet<tblOIOrganization_BK> tblOIOrganization_BK { get; set; }
        public virtual DbSet<tblOrganizations_backup> tblOrganizations_backup { get; set; }
        public virtual DbSet<tblReviewerReasonCode> tblReviewerReasonCodes { get; set; }
        public virtual DbSet<tblState> tblStates { get; set; }
        public virtual DbSet<tblTeamCode> tblTeamCodes { get; set; }
        public virtual DbSet<ColumnProperty> ColumnProperties { get; set; }
        public virtual DbSet<SprocParameterProperty> SprocParameterProperties { get; set; }
        public virtual DbSet<SprocProperty> SprocProperties { get; set; }
        public virtual DbSet<TableProperty> TableProperties { get; set; }
        public virtual DbSet<ViewColumnProperty> ViewColumnProperties { get; set; }
        public virtual DbSet<ViewProperty> ViewProperties { get; set; }
        public virtual DbSet<vwDocAttachment> vwDocAttachments { get; set; }
        public virtual DbSet<vwItemsSummary> vwItemsSummaries { get; set; }
        public virtual DbSet<vwItemsValidation> vwItemsValidations { get; set; }
        public virtual DbSet<vwUserIDRef> vwUserIDRefs { get; set; }
        public virtual DbSet<SimilarTable> SimilarTables { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        [DbFunction("ULOContext", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[ULOContext].[fnSplitString](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        [DbFunction("ULOContext", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string csv_str, string delimiter)
        {
            var csv_strParameter = csv_str != null ?
                new ObjectParameter("csv_str", csv_str) :
                new ObjectParameter("csv_str", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[ULOContext].[SplitString](@csv_str, @delimiter)", csv_strParameter, delimiterParameter);
        }
    
        public virtual int AssertEquals(string msg)
        {
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertEquals", msgParameter);
        }
    
        public virtual int AssertNotNull(Nullable<int> actual, string msg)
        {
            var actualParameter = actual.HasValue ?
                new ObjectParameter("actual", actual) :
                new ObjectParameter("actual", typeof(int));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertNotNull", actualParameter, msgParameter);
        }
    
        public virtual int AssertNull(Nullable<int> actual, string msg)
        {
            var actualParameter = actual.HasValue ?
                new ObjectParameter("actual", actual) :
                new ObjectParameter("actual", typeof(int));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertNull", actualParameter, msgParameter);
        }
    
        public virtual int AssertZero(Nullable<int> actual, string msg)
        {
            var actualParameter = actual.HasValue ?
                new ObjectParameter("actual", actual) :
                new ObjectParameter("actual", typeof(int));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertZero", actualParameter, msgParameter);
        }
    
        public virtual int AssertZeroOrOne(Nullable<int> actual, string msg)
        {
            var actualParameter = actual.HasValue ?
                new ObjectParameter("actual", actual) :
                new ObjectParameter("actual", typeof(int));
    
            var msgParameter = msg != null ?
                new ObjectParameter("msg", msg) :
                new ObjectParameter("msg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssertZeroOrOne", actualParameter, msgParameter);
        }
    
        public virtual int ColumnPropertySet(string tableName, string columnName, string propertyVal, string tableSchema, string propertyName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            var propertyValParameter = propertyVal != null ?
                new ObjectParameter("propertyVal", propertyVal) :
                new ObjectParameter("propertyVal", typeof(string));
    
            var tableSchemaParameter = tableSchema != null ?
                new ObjectParameter("tableSchema", tableSchema) :
                new ObjectParameter("tableSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ColumnPropertySet", tableNameParameter, columnNameParameter, propertyValParameter, tableSchemaParameter, propertyNameParameter);
        }
    
        public virtual int PrintNow(string format, Nullable<int> n0, Nullable<int> n1, Nullable<int> n2, Nullable<int> n3, Nullable<int> n4, Nullable<int> n5, Nullable<int> n6, Nullable<int> n7, string s0, string s1, string s2, string s3, Nullable<System.DateTime> d0, Nullable<System.DateTime> d1, Nullable<System.DateTime> d2, Nullable<System.DateTime> d3, Nullable<bool> b0, Nullable<bool> b1, Nullable<bool> b2, Nullable<bool> b3, Nullable<decimal> m0, Nullable<decimal> m1, Nullable<decimal> m2, Nullable<decimal> m3, Nullable<System.DateTime> startedAt)
        {
            var formatParameter = format != null ?
                new ObjectParameter("format", format) :
                new ObjectParameter("format", typeof(string));
    
            var n0Parameter = n0.HasValue ?
                new ObjectParameter("n0", n0) :
                new ObjectParameter("n0", typeof(int));
    
            var n1Parameter = n1.HasValue ?
                new ObjectParameter("n1", n1) :
                new ObjectParameter("n1", typeof(int));
    
            var n2Parameter = n2.HasValue ?
                new ObjectParameter("n2", n2) :
                new ObjectParameter("n2", typeof(int));
    
            var n3Parameter = n3.HasValue ?
                new ObjectParameter("n3", n3) :
                new ObjectParameter("n3", typeof(int));
    
            var n4Parameter = n4.HasValue ?
                new ObjectParameter("n4", n4) :
                new ObjectParameter("n4", typeof(int));
    
            var n5Parameter = n5.HasValue ?
                new ObjectParameter("n5", n5) :
                new ObjectParameter("n5", typeof(int));
    
            var n6Parameter = n6.HasValue ?
                new ObjectParameter("n6", n6) :
                new ObjectParameter("n6", typeof(int));
    
            var n7Parameter = n7.HasValue ?
                new ObjectParameter("n7", n7) :
                new ObjectParameter("n7", typeof(int));
    
            var s0Parameter = s0 != null ?
                new ObjectParameter("s0", s0) :
                new ObjectParameter("s0", typeof(string));
    
            var s1Parameter = s1 != null ?
                new ObjectParameter("s1", s1) :
                new ObjectParameter("s1", typeof(string));
    
            var s2Parameter = s2 != null ?
                new ObjectParameter("s2", s2) :
                new ObjectParameter("s2", typeof(string));
    
            var s3Parameter = s3 != null ?
                new ObjectParameter("s3", s3) :
                new ObjectParameter("s3", typeof(string));
    
            var d0Parameter = d0.HasValue ?
                new ObjectParameter("d0", d0) :
                new ObjectParameter("d0", typeof(System.DateTime));
    
            var d1Parameter = d1.HasValue ?
                new ObjectParameter("d1", d1) :
                new ObjectParameter("d1", typeof(System.DateTime));
    
            var d2Parameter = d2.HasValue ?
                new ObjectParameter("d2", d2) :
                new ObjectParameter("d2", typeof(System.DateTime));
    
            var d3Parameter = d3.HasValue ?
                new ObjectParameter("d3", d3) :
                new ObjectParameter("d3", typeof(System.DateTime));
    
            var b0Parameter = b0.HasValue ?
                new ObjectParameter("b0", b0) :
                new ObjectParameter("b0", typeof(bool));
    
            var b1Parameter = b1.HasValue ?
                new ObjectParameter("b1", b1) :
                new ObjectParameter("b1", typeof(bool));
    
            var b2Parameter = b2.HasValue ?
                new ObjectParameter("b2", b2) :
                new ObjectParameter("b2", typeof(bool));
    
            var b3Parameter = b3.HasValue ?
                new ObjectParameter("b3", b3) :
                new ObjectParameter("b3", typeof(bool));
    
            var m0Parameter = m0.HasValue ?
                new ObjectParameter("m0", m0) :
                new ObjectParameter("m0", typeof(decimal));
    
            var m1Parameter = m1.HasValue ?
                new ObjectParameter("m1", m1) :
                new ObjectParameter("m1", typeof(decimal));
    
            var m2Parameter = m2.HasValue ?
                new ObjectParameter("m2", m2) :
                new ObjectParameter("m2", typeof(decimal));
    
            var m3Parameter = m3.HasValue ?
                new ObjectParameter("m3", m3) :
                new ObjectParameter("m3", typeof(decimal));
    
            var startedAtParameter = startedAt.HasValue ?
                new ObjectParameter("startedAt", startedAt) :
                new ObjectParameter("startedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintNow", formatParameter, n0Parameter, n1Parameter, n2Parameter, n3Parameter, n4Parameter, n5Parameter, n6Parameter, n7Parameter, s0Parameter, s1Parameter, s2Parameter, s3Parameter, d0Parameter, d1Parameter, d2Parameter, d3Parameter, b0Parameter, b1Parameter, b2Parameter, b3Parameter, m0Parameter, m1Parameter, m2Parameter, m3Parameter, startedAtParameter);
        }
    
        public virtual int PrintSql(string sql, Nullable<bool> debugMode)
        {
            var sqlParameter = sql != null ?
                new ObjectParameter("sql", sql) :
                new ObjectParameter("sql", typeof(string));
    
            var debugModeParameter = debugMode.HasValue ?
                new ObjectParameter("debugMode", debugMode) :
                new ObjectParameter("debugMode", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrintSql", sqlParameter, debugModeParameter);
        }
    
        public virtual int ProcResultsetColumnsPopulate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcResultsetColumnsPopulate");
        }
    
        public virtual int SprocParameterPropertySet(string sprocName, string parameterName, string propertyVal, string sprocSchema, string propertyName)
        {
            var sprocNameParameter = sprocName != null ?
                new ObjectParameter("sprocName", sprocName) :
                new ObjectParameter("sprocName", typeof(string));
    
            var parameterNameParameter = parameterName != null ?
                new ObjectParameter("parameterName", parameterName) :
                new ObjectParameter("parameterName", typeof(string));
    
            var propertyValParameter = propertyVal != null ?
                new ObjectParameter("propertyVal", propertyVal) :
                new ObjectParameter("propertyVal", typeof(string));
    
            var sprocSchemaParameter = sprocSchema != null ?
                new ObjectParameter("sprocSchema", sprocSchema) :
                new ObjectParameter("sprocSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SprocParameterPropertySet", sprocNameParameter, parameterNameParameter, propertyValParameter, sprocSchemaParameter, propertyNameParameter);
        }
    
        public virtual int SprocPropertySet(string sprocName, string routineSchema, string propertyName)
        {
            var sprocNameParameter = sprocName != null ?
                new ObjectParameter("sprocName", sprocName) :
                new ObjectParameter("sprocName", typeof(string));
    
            var routineSchemaParameter = routineSchema != null ?
                new ObjectParameter("routineSchema", routineSchema) :
                new ObjectParameter("routineSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SprocPropertySet", sprocNameParameter, routineSchemaParameter, propertyNameParameter);
        }
    
        public virtual int TablePropertySet(string tableName, string tableSchema, string propertyName, Nullable<bool> remove)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var tableSchemaParameter = tableSchema != null ?
                new ObjectParameter("tableSchema", tableSchema) :
                new ObjectParameter("tableSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("remove", remove) :
                new ObjectParameter("remove", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TablePropertySet", tableNameParameter, tableSchemaParameter, propertyNameParameter, removeParameter);
        }
    
        public virtual int ViewColumnPropertySet(string viewName, string columnName, string propertyVal, string viewSchema, string propertyName)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            var propertyValParameter = propertyVal != null ?
                new ObjectParameter("propertyVal", propertyVal) :
                new ObjectParameter("propertyVal", typeof(string));
    
            var viewSchemaParameter = viewSchema != null ?
                new ObjectParameter("viewSchema", viewSchema) :
                new ObjectParameter("viewSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ViewColumnPropertySet", viewNameParameter, columnNameParameter, propertyValParameter, viewSchemaParameter, propertyNameParameter);
        }
    
        public virtual int ViewPropertySet(string viewName, string viewSchema, string propertyName, Nullable<bool> remove)
        {
            var viewNameParameter = viewName != null ?
                new ObjectParameter("viewName", viewName) :
                new ObjectParameter("viewName", typeof(string));
    
            var viewSchemaParameter = viewSchema != null ?
                new ObjectParameter("viewSchema", viewSchema) :
                new ObjectParameter("viewSchema", typeof(string));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("propertyName", propertyName) :
                new ObjectParameter("propertyName", typeof(string));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("remove", remove) :
                new ObjectParameter("remove", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ViewPropertySet", viewNameParameter, viewSchemaParameter, propertyNameParameter, removeParameter);
        }
    
        public virtual int spActivateAssignEmailRequest(Nullable<int> senderUserID, Nullable<int> loadID)
        {
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spActivateAssignEmailRequest", senderUserIDParameter, loadIDParameter);
        }
    
        public virtual int spArchiveLoad(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spArchiveLoad", loadIDParameter);
        }
    
        public virtual int spCalculateItemStatus(Nullable<int> oItemID, string uLOOrgCode, Nullable<int> reviewerUserID, ObjectParameter status)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCalculateItemStatus", oItemIDParameter, uLOOrgCodeParameter, reviewerUserIDParameter, status);
        }
    
        public virtual int spCancelRerouteRequest(Nullable<int> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCancelRerouteRequest", requestIDParameter);
        }
    
        public virtual int spCertifyDeobligation(Nullable<int> oItemID, Nullable<int> itemLNum, ObjectParameter deobligatedDate)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var itemLNumParameter = itemLNum.HasValue ?
                new ObjectParameter("ItemLNum", itemLNum) :
                new ObjectParameter("ItemLNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCertifyDeobligation", oItemIDParameter, itemLNumParameter, deobligatedDate);
        }
    
        public virtual int spCheckLineStatus(Nullable<int> oItemID, Nullable<int> itemLNum, string uLOOrgCode, Nullable<int> reviewerUserID, ObjectParameter returnCode)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var itemLNumParameter = itemLNum.HasValue ?
                new ObjectParameter("ItemLNum", itemLNum) :
                new ObjectParameter("ItemLNum", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCheckLineStatus", oItemIDParameter, itemLNumParameter, uLOOrgCodeParameter, reviewerUserIDParameter, returnCode);
        }
    
        public virtual int spClearLaborVariance(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClearLaborVariance", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual int spClearSummaryReportState(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClearSummaryReportState", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual int spCorrectOrgName(string loadID, string oItemID, string orgCode)
        {
            var loadIDParameter = loadID != null ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(string));
    
            var oItemIDParameter = oItemID != null ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCorrectOrgName", loadIDParameter, oItemIDParameter, orgCodeParameter);
        }
    
        public virtual int spCreateRecordsSendAtt(Nullable<int> newLoadID)
        {
            var newLoadIDParameter = newLoadID.HasValue ?
                new ObjectParameter("NewLoadID", newLoadID) :
                new ObjectParameter("NewLoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateRecordsSendAtt", newLoadIDParameter);
        }
    
        public virtual ObjectResult<spDaraByDocNum_Result> spDaraByDocNum(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDaraByDocNum_Result>("spDaraByDocNum", loadIDParameter);
        }
    
        public virtual int spDeleteAttachment(string docNumber, Nullable<int> docID, Nullable<int> updateUserID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteAttachment", docNumberParameter, docIDParameter, updateUserIDParameter);
        }
    
        public virtual int spDeleteDocumentContact(string docNumber, string roleDesc, string firstName, string lastName, ObjectParameter contactUserID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var roleDescParameter = roleDesc != null ?
                new ObjectParameter("RoleDesc", roleDesc) :
                new ObjectParameter("RoleDesc", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDocumentContact", docNumberParameter, roleDescParameter, firstNameParameter, lastNameParameter, contactUserID);
        }
    
        public virtual int spDeleteEntryData_FSReport(Nullable<int> entryID, Nullable<int> userID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEntryData_FSReport", entryIDParameter, userIDParameter);
        }
    
        public virtual int spEmptyTablesForImport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEmptyTablesForImport");
        }
    
        public virtual int spGetActionHistory(Nullable<int> historyAction, string orgCode)
        {
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetActionHistory", historyActionParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetActiveCodeList_Result> spGetActiveCodeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetActiveCodeList_Result>("spGetActiveCodeList");
        }
    
        public virtual ObjectResult<spGetActiveLoadList_Result> spGetActiveLoadList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetActiveLoadList_Result>("spGetActiveLoadList");
        }
    
        public virtual int spGetAdjDocList_FSReport(string orgCode, string fiscalYear, string bookMonth, string reportFunction, string oCCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAdjDocList_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, reportFunctionParameter, oCCodeParameter);
        }
    
        public virtual int spGetAdjustment_FSReport(string orgCode, string fiscalYear, string bookMonth, string reportFunction, string oCCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAdjustment_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, reportFunctionParameter, oCCodeParameter);
        }
    
        public virtual ObjectResult<spGetAdjustment_Search09_Result> spGetAdjustment_Search09(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustment_Search09_Result>("spGetAdjustment_Search09", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetAdjustment_Search10_Result> spGetAdjustment_Search10(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustment_Search10_Result>("spGetAdjustment_Search10", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetAdjustmentByOrg09_Result> spGetAdjustmentByOrg09(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustmentByOrg09_Result>("spGetAdjustmentByOrg09", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetAdjustmentByOrg10_Result> spGetAdjustmentByOrg10(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustmentByOrg10_Result>("spGetAdjustmentByOrg10", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetAdjustmentTotalsByOrg09_Result> spGetAdjustmentTotalsByOrg09(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustmentTotalsByOrg09_Result>("spGetAdjustmentTotalsByOrg09", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual ObjectResult<spGetAdjustmentTotalsByOrg10_Result> spGetAdjustmentTotalsByOrg10(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdjustmentTotalsByOrg10_Result>("spGetAdjustmentTotalsByOrg10", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual ObjectResult<spGetAllActiveInactiveUsers_Result> spGetAllActiveInactiveUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllActiveInactiveUsers_Result>("spGetAllActiveInactiveUsers");
        }
    
        public virtual int spGetAllowanceHistory(string fiscalYear, Nullable<int> code1, Nullable<int> code2)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var code1Parameter = code1.HasValue ?
                new ObjectParameter("Code1", code1) :
                new ObjectParameter("Code1", typeof(int));
    
            var code2Parameter = code2.HasValue ?
                new ObjectParameter("Code2", code2) :
                new ObjectParameter("Code2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllowanceHistory", fiscalYearParameter, code1Parameter, code2Parameter);
        }
    
        public virtual ObjectResult<string> spGetAllowanceOrgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetAllowanceOrgList");
        }
    
        public virtual ObjectResult<spGetAllULOActiveUsers_Result> spGetAllULOActiveUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllULOActiveUsers_Result>("spGetAllULOActiveUsers");
        }
    
        public virtual ObjectResult<spGetAllULOUsers_Result> spGetAllULOUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllULOUsers_Result>("spGetAllULOUsers");
        }
    
        public virtual ObjectResult<spGetAllUserRoles_Result> spGetAllUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUserRoles_Result>("spGetAllUserRoles");
        }
    
        public virtual ObjectResult<spGetAllUserRolesByApp_Result> spGetAllUserRolesByApp(string app)
        {
            var appParameter = app != null ?
                new ObjectParameter("app", app) :
                new ObjectParameter("app", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllUserRolesByApp_Result>("spGetAllUserRolesByApp", appParameter);
        }
    
        public virtual ObjectResult<spGetAttachRecommend_Result> spGetAttachRecommend(string docType)
        {
            var docTypeParameter = docType != null ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAttachRecommend_Result>("spGetAttachRecommend", docTypeParameter);
        }
    
        public virtual int spGetAttHistoryPerLoad(Nullable<int> loadID, string docNumber)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAttHistoryPerLoad", loadIDParameter, docNumberParameter);
        }
    
        public virtual int spGetAwardAmount_FSReport(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAwardAmount_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual int spGetAwardDocList_FSReport(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAwardDocList_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual ObjectResult<spGetBA53AccrualTypeActions_Result> spGetBA53AccrualTypeActions(Nullable<int> accrualTypeCode)
        {
            var accrualTypeCodeParameter = accrualTypeCode.HasValue ?
                new ObjectParameter("AccrualTypeCode", accrualTypeCode) :
                new ObjectParameter("AccrualTypeCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBA53AccrualTypeActions_Result>("spGetBA53AccrualTypeActions", accrualTypeCodeParameter);
        }
    
        public virtual ObjectResult<spGetBA53AccrualTypes_Result> spGetBA53AccrualTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBA53AccrualTypes_Result>("spGetBA53AccrualTypes");
        }
    
        public virtual int spGetBA53OIList(Nullable<int> loadID, string organization, Nullable<int> userID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetBA53OIList", loadIDParameter, organizationParameter, userIDParameter);
        }
    
        public virtual ObjectResult<string> spGetBAList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetBAList");
        }
    
        public virtual ObjectResult<spGetBusinessLineList_Result> spGetBusinessLineList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBusinessLineList_Result>("spGetBusinessLineList");
        }
    
        public virtual ObjectResult<spGetCodeList_Result> spGetCodeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCodeList_Result>("spGetCodeList");
        }
    
        public virtual ObjectResult<spGetContactsRoles_Result> spGetContactsRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetContactsRoles_Result>("spGetContactsRoles");
        }
    
        public virtual ObjectResult<spGetCostElementList_Result> spGetCostElementList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCostElementList_Result>("spGetCostElementList");
        }
    
        public virtual ObjectResult<spGetDataSourceTypes_Result> spGetDataSourceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDataSourceTypes_Result>("spGetDataSourceTypes");
        }
    
        public virtual ObjectResult<spGetDefaultJustifications_Result> spGetDefaultJustifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDefaultJustifications_Result>("spGetDefaultJustifications");
        }
    
        public virtual ObjectResult<spGetDocHistory_Result> spGetDocHistory(string docNumber)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDocHistory_Result>("spGetDocHistory", docNumberParameter);
        }
    
        public virtual int spGetDocHistoryPerLoad(Nullable<int> loadID, string docNumber)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDocHistoryPerLoad", loadIDParameter, docNumberParameter);
        }
    
        public virtual ObjectResult<spGetDocLines_Result> spGetDocLines(string docNumber, Nullable<int> loadID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDocLines_Result>("spGetDocLines", docNumberParameter, loadIDParameter);
        }
    
        public virtual ObjectResult<string> spGetDocNumByItemID(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetDocNumByItemID", itemIDParameter);
        }
    
        public virtual int spGetDocTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetDocTypes");
        }
    
        public virtual ObjectResult<spGetEmailRequests_Result> spGetEmailRequests(Nullable<int> emailStatus, Nullable<int> actionCode)
        {
            var emailStatusParameter = emailStatus.HasValue ?
                new ObjectParameter("EmailStatus", emailStatus) :
                new ObjectParameter("EmailStatus", typeof(int));
    
            var actionCodeParameter = actionCode.HasValue ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmailRequests_Result>("spGetEmailRequests", emailStatusParameter, actionCodeParameter);
        }
    
        public virtual int spGetEmailRequestsForAssign()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmailRequestsForAssign");
        }
    
        public virtual int spGetEmailRequestsForRRequest(Nullable<int> emailStatus, Nullable<int> actionCode)
        {
            var emailStatusParameter = emailStatus.HasValue ?
                new ObjectParameter("EmailStatus", emailStatus) :
                new ObjectParameter("EmailStatus", typeof(int));
    
            var actionCodeParameter = actionCode.HasValue ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmailRequestsForRRequest", emailStatusParameter, actionCodeParameter);
        }
    
        public virtual ObjectResult<spGetEmptyLaborVariance_Result> spGetEmptyLaborVariance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmptyLaborVariance_Result>("spGetEmptyLaborVariance");
        }
    
        public virtual ObjectResult<spGetEmptySumReportState_Result> spGetEmptySumReportState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmptySumReportState_Result>("spGetEmptySumReportState");
        }
    
        public virtual int spGetEntryData_FSReport(string userEntryType, string orgCode, string fiscalYear, string bookMonth, string reportFunction, string oCCode)
        {
            var userEntryTypeParameter = userEntryType != null ?
                new ObjectParameter("UserEntryType", userEntryType) :
                new ObjectParameter("UserEntryType", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEntryData_FSReport", userEntryTypeParameter, orgCodeParameter, fiscalYearParameter, bookMonthParameter, reportFunctionParameter, oCCodeParameter);
        }
    
        public virtual int spGetFile_toDelete(Nullable<int> fileID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFile_toDelete", fileIDParameter);
        }
    
        public virtual ObjectResult<spGetFSListByReportStatus_Result> spGetFSListByReportStatus(Nullable<int> status)
        {
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFSListByReportStatus_Result>("spGetFSListByReportStatus", statusParameter);
        }
    
        public virtual ObjectResult<spGetFSReportConfig_Result> spGetFSReportConfig()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFSReportConfig_Result>("spGetFSReportConfig");
        }
    
        public virtual ObjectResult<spGetFSReportStatus_Result> spGetFSReportStatus(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFSReportStatus_Result>("spGetFSReportStatus", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<string> spGetFundsAllFunctionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetFundsAllFunctionList");
        }
    
        public virtual int spGetFundsAvailableMonth(string fiscalYear)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFundsAvailableMonth", fiscalYearParameter);
        }
    
        public virtual ObjectResult<spGetFundsLaborVariance_Result> spGetFundsLaborVariance(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFundsLaborVariance_Result>("spGetFundsLaborVariance", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual ObjectResult<spGetFundsOrganizations_Result> spGetFundsOrganizations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFundsOrganizations_Result>("spGetFundsOrganizations");
        }
    
        public virtual ObjectResult<string> spGetFundsSumFunctionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetFundsSumFunctionList");
        }
    
        public virtual int spGetFundStatusUpdateHistory(Nullable<int> historyAction, string orgCode, string fiscalYear, string bookMonth, string functionCode, string oCCode)
        {
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFundStatusUpdateHistory", historyActionParameter, orgCodeParameter, fiscalYearParameter, bookMonthParameter, functionCodeParameter, oCCodeParameter);
        }
    
        public virtual int spGetFundStatusUpdateHistory2(Nullable<int> historyAction, string fiscalYear, string bookMonth, string orgCode)
        {
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetFundStatusUpdateHistory2", historyActionParameter, fiscalYearParameter, bookMonthParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetFundStatusUploadHistory_Result> spGetFundStatusUploadHistory(Nullable<int> historyAction, string fiscalYear, string bookMonth)
        {
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFundStatusUploadHistory_Result>("spGetFundStatusUploadHistory", historyActionParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual ObjectResult<spGetFutureDueDateLoads_Result> spGetFutureDueDateLoads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFutureDueDateLoads_Result>("spGetFutureDueDateLoads");
        }
    
        public virtual ObjectResult<spGetFYAllowance_Result> spGetFYAllowance(string fiscalYear)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowance_Result>("spGetFYAllowance", fiscalYearParameter);
        }
    
        public virtual ObjectResult<spGetFYAllowanceByFunc2_Result> spGetFYAllowanceByFunc2(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowanceByFunc2_Result>("spGetFYAllowanceByFunc2", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetFYAllowanceByFunc3_Result> spGetFYAllowanceByFunc3(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowanceByFunc3_Result>("spGetFYAllowanceByFunc3", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetFYAllowanceByOrg2_Result> spGetFYAllowanceByOrg2(string fiscalYear)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowanceByOrg2_Result>("spGetFYAllowanceByOrg2", fiscalYearParameter);
        }
    
        public virtual ObjectResult<spGetFYAllowanceByOrg3_Result> spGetFYAllowanceByOrg3(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowanceByOrg3_Result>("spGetFYAllowanceByOrg3", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetFYAllowanceTotals2_Result> spGetFYAllowanceTotals2(string fiscalYear)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFYAllowanceTotals2_Result>("spGetFYAllowanceTotals2", fiscalYearParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetFYAllowanceTotalsM(string fiscalYear, string bookMonth)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetFYAllowanceTotalsM", fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spGetFYAllowanceTotalsMO(string fiscalYear, string bookMonth, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spGetFYAllowanceTotalsMO", fiscalYearParameter, bookMonthParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetHistoryByEmailRequest_Result> spGetHistoryByEmailRequest(Nullable<int> emailRequestID)
        {
            var emailRequestIDParameter = emailRequestID.HasValue ?
                new ObjectParameter("EmailRequestID", emailRequestID) :
                new ObjectParameter("EmailRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHistoryByEmailRequest_Result>("spGetHistoryByEmailRequest", emailRequestIDParameter);
        }
    
        public virtual int spGetIncome_FSReport(string orgCode, string fiscalYear, string bookMonth, string reportFunction)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetIncome_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, reportFunctionParameter);
        }
    
        public virtual ObjectResult<spGetIncome_Search09_Result> spGetIncome_Search09(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncome_Search09_Result>("spGetIncome_Search09", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetIncome_Search10_Result> spGetIncome_Search10(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncome_Search10_Result>("spGetIncome_Search10", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetIncomeByOrg09_Result> spGetIncomeByOrg09(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncomeByOrg09_Result>("spGetIncomeByOrg09", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetIncomeByOrg10_Result> spGetIncomeByOrg10(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncomeByOrg10_Result>("spGetIncomeByOrg10", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetIncomeTotalsByOrg09_Result> spGetIncomeTotalsByOrg09(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncomeTotalsByOrg09_Result>("spGetIncomeTotalsByOrg09", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual ObjectResult<spGetIncomeTotalsByOrg10_Result> spGetIncomeTotalsByOrg10(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIncomeTotalsByOrg10_Result>("spGetIncomeTotalsByOrg10", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual ObjectResult<spGetInvalidReviewerReasonCodes_Result> spGetInvalidReviewerReasonCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetInvalidReviewerReasonCodes_Result>("spGetInvalidReviewerReasonCodes");
        }
    
        public virtual int spGetItemAssignUsers(Nullable<int> oItemID, string orgCode)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetItemAssignUsers", oItemIDParameter, orgCodeParameter);
        }
    
        public virtual int spGetItemContacts(string docNumber)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetItemContacts", docNumberParameter);
        }
    
        public virtual int spGetItemHistory(Nullable<int> oItemID, Nullable<int> loadID)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetItemHistory", oItemIDParameter, loadIDParameter);
        }
    
        public virtual ObjectResult<spGetJustifications_Result> spGetJustifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJustifications_Result>("spGetJustifications");
        }
    
        public virtual ObjectResult<spGetJustificationTypeByID_Result> spGetJustificationTypeByID(Nullable<int> justification)
        {
            var justificationParameter = justification.HasValue ?
                new ObjectParameter("Justification", justification) :
                new ObjectParameter("Justification", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetJustificationTypeByID_Result>("spGetJustificationTypeByID", justificationParameter);
        }
    
        public virtual int spGetLineBA53Details(Nullable<int> oItemID, Nullable<int> lineNum)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLineBA53Details", oItemIDParameter, lineNumParameter);
        }
    
        public virtual int spGetLineNumDetails(Nullable<int> oItemID, Nullable<int> lineNum)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLineNumDetails", oItemIDParameter, lineNumParameter);
        }
    
        public virtual int spGetLinesOrgCodes(Nullable<int> oItemID, string lines)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var linesParameter = lines != null ?
                new ObjectParameter("Lines", lines) :
                new ObjectParameter("Lines", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLinesOrgCodes", oItemIDParameter, linesParameter);
        }
    
        public virtual ObjectResult<spGetLoadDetails_Result> spGetLoadDetails(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadDetails_Result>("spGetLoadDetails", loadIDParameter);
        }
    
        public virtual ObjectResult<spGetLoadHistory_Result> spGetLoadHistory(Nullable<int> loadID, Nullable<int> actionCode)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var actionCodeParameter = actionCode.HasValue ?
                new ObjectParameter("ActionCode", actionCode) :
                new ObjectParameter("ActionCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadHistory_Result>("spGetLoadHistory", loadIDParameter, actionCodeParameter);
        }
    
        public virtual ObjectResult<spGetLoadInfo_Result> spGetLoadInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadInfo_Result>("spGetLoadInfo");
        }
    
        public virtual ObjectResult<spGetLoadList_Result> spGetLoadList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadList_Result>("spGetLoadList");
        }
    
        public virtual ObjectResult<spGetLoadListNotArchived_Result> spGetLoadListNotArchived()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadListNotArchived_Result>("spGetLoadListNotArchived");
        }
    
        public virtual ObjectResult<spGetLoadListWithActiveDueDate_Result> spGetLoadListWithActiveDueDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLoadListWithActiveDueDate_Result>("spGetLoadListWithActiveDueDate");
        }
    
        public virtual ObjectResult<spGetMonthAllowanceDistrb_Result> spGetMonthAllowanceDistrb(string fiscalYear, string bookMonth, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMonthAllowanceDistrb_Result>("spGetMonthAllowanceDistrb", fiscalYearParameter, bookMonthParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetMonthReportState_Result> spGetMonthReportState(string fiscalYear, string bookMonth, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMonthReportState_Result>("spGetMonthReportState", fiscalYearParameter, bookMonthParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetNullReviewerUserIDForCompletedItems_Result> spGetNullReviewerUserIDForCompletedItems(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetNullReviewerUserIDForCompletedItems_Result>("spGetNullReviewerUserIDForCompletedItems", loadIDParameter);
        }
    
        public virtual ObjectResult<spGetObjectClassCodeList_Result> spGetObjectClassCodeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObjectClassCodeList_Result>("spGetObjectClassCodeList");
        }
    
        public virtual int spGetObl_FSReport(string orgCode, string fiscalYear, string bookMonth, string bookMonthList, string reportFunction, string oCCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var bookMonthListParameter = bookMonthList != null ?
                new ObjectParameter("BookMonthList", bookMonthList) :
                new ObjectParameter("BookMonthList", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetObl_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, bookMonthListParameter, reportFunctionParameter, oCCodeParameter);
        }
    
        public virtual ObjectResult<spGetObligation_Search09_Result> spGetObligation_Search09(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligation_Search09_Result>("spGetObligation_Search09", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetObligation_Search10_Result> spGetObligation_Search10(string orgCode, string docNumber, string bookMonth, string sumFunction, string oCCode, string costElem, ObjectParameter recordsCount, ObjectParameter totalAmount, Nullable<bool> getAllRecords, Nullable<bool> getLimitedRecords, string budgetActivity)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var sumFunctionParameter = sumFunction != null ?
                new ObjectParameter("SumFunction", sumFunction) :
                new ObjectParameter("SumFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var costElemParameter = costElem != null ?
                new ObjectParameter("CostElem", costElem) :
                new ObjectParameter("CostElem", typeof(string));
    
            var getAllRecordsParameter = getAllRecords.HasValue ?
                new ObjectParameter("GetAllRecords", getAllRecords) :
                new ObjectParameter("GetAllRecords", typeof(bool));
    
            var getLimitedRecordsParameter = getLimitedRecords.HasValue ?
                new ObjectParameter("GetLimitedRecords", getLimitedRecords) :
                new ObjectParameter("GetLimitedRecords", typeof(bool));
    
            var budgetActivityParameter = budgetActivity != null ?
                new ObjectParameter("BudgetActivity", budgetActivity) :
                new ObjectParameter("BudgetActivity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligation_Search10_Result>("spGetObligation_Search10", orgCodeParameter, docNumberParameter, bookMonthParameter, sumFunctionParameter, oCCodeParameter, costElemParameter, recordsCount, totalAmount, getAllRecordsParameter, getLimitedRecordsParameter, budgetActivityParameter);
        }
    
        public virtual ObjectResult<spGetObligationsByOrg09_Result> spGetObligationsByOrg09(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligationsByOrg09_Result>("spGetObligationsByOrg09", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetObligationsByOrg10_Result> spGetObligationsByOrg10(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligationsByOrg10_Result>("spGetObligationsByOrg10", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetObligationTotalsByOrg09_Result> spGetObligationTotalsByOrg09(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligationTotalsByOrg09_Result>("spGetObligationTotalsByOrg09", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual ObjectResult<spGetObligationTotalsByOrg10_Result> spGetObligationTotalsByOrg10(string orgCode, Nullable<bool> allAvailableMonth, string month10, string month11, string month12, string month01, string month02, string month03, string month04, string month05, string month06, string month07, string month08, string month09)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var allAvailableMonthParameter = allAvailableMonth.HasValue ?
                new ObjectParameter("AllAvailableMonth", allAvailableMonth) :
                new ObjectParameter("AllAvailableMonth", typeof(bool));
    
            var month10Parameter = month10 != null ?
                new ObjectParameter("Month10", month10) :
                new ObjectParameter("Month10", typeof(string));
    
            var month11Parameter = month11 != null ?
                new ObjectParameter("Month11", month11) :
                new ObjectParameter("Month11", typeof(string));
    
            var month12Parameter = month12 != null ?
                new ObjectParameter("Month12", month12) :
                new ObjectParameter("Month12", typeof(string));
    
            var month01Parameter = month01 != null ?
                new ObjectParameter("Month01", month01) :
                new ObjectParameter("Month01", typeof(string));
    
            var month02Parameter = month02 != null ?
                new ObjectParameter("Month02", month02) :
                new ObjectParameter("Month02", typeof(string));
    
            var month03Parameter = month03 != null ?
                new ObjectParameter("Month03", month03) :
                new ObjectParameter("Month03", typeof(string));
    
            var month04Parameter = month04 != null ?
                new ObjectParameter("Month04", month04) :
                new ObjectParameter("Month04", typeof(string));
    
            var month05Parameter = month05 != null ?
                new ObjectParameter("Month05", month05) :
                new ObjectParameter("Month05", typeof(string));
    
            var month06Parameter = month06 != null ?
                new ObjectParameter("Month06", month06) :
                new ObjectParameter("Month06", typeof(string));
    
            var month07Parameter = month07 != null ?
                new ObjectParameter("Month07", month07) :
                new ObjectParameter("Month07", typeof(string));
    
            var month08Parameter = month08 != null ?
                new ObjectParameter("Month08", month08) :
                new ObjectParameter("Month08", typeof(string));
    
            var month09Parameter = month09 != null ?
                new ObjectParameter("Month09", month09) :
                new ObjectParameter("Month09", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetObligationTotalsByOrg10_Result>("spGetObligationTotalsByOrg10", orgCodeParameter, allAvailableMonthParameter, month10Parameter, month11Parameter, month12Parameter, month01Parameter, month02Parameter, month03Parameter, month04Parameter, month05Parameter, month06Parameter, month07Parameter, month08Parameter, month09Parameter);
        }
    
        public virtual int spGetOblInfo_FSReport(string orgCode, string fiscalYear, string bookMonth, string bookMonthList, string reportFunction, string oCCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var bookMonthListParameter = bookMonthList != null ?
                new ObjectParameter("BookMonthList", bookMonthList) :
                new ObjectParameter("BookMonthList", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOblInfo_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, bookMonthListParameter, reportFunctionParameter, oCCodeParameter);
        }
    
        public virtual ObjectResult<spGetOIFeedbackDetails_Result> spGetOIFeedbackDetails(Nullable<int> oItemID)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOIFeedbackDetails_Result>("spGetOIFeedbackDetails", oItemIDParameter);
        }
    
        public virtual ObjectResult<spGetOILinesForDeobligation_Result> spGetOILinesForDeobligation(Nullable<int> loadID, string organization)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOILinesForDeobligation_Result>("spGetOILinesForDeobligation", loadIDParameter, organizationParameter);
        }
    
        public virtual int spGetOIList(Nullable<int> loadID, string organization, Nullable<int> userID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOIList", loadIDParameter, organizationParameter, userIDParameter);
        }
    
        public virtual ObjectResult<spGetOItemDetails_Result> spGetOItemDetails(Nullable<int> oItemID, Nullable<int> loadID, string uLOOrgCode, Nullable<int> reviewerUserID)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOItemDetails_Result>("spGetOItemDetails", oItemIDParameter, loadIDParameter, uLOOrgCodeParameter, reviewerUserIDParameter);
        }
    
        public virtual int spGetOItemLines(Nullable<int> oItemID, string uLOOrgCode)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOItemLines", oItemIDParameter, uLOOrgCodeParameter);
        }
    
        public virtual int spGetOItemLinesByReviewerID(Nullable<int> oItemID, Nullable<int> currentItemReviewerID)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var currentItemReviewerIDParameter = currentItemReviewerID.HasValue ?
                new ObjectParameter("CurrentItemReviewerID", currentItemReviewerID) :
                new ObjectParameter("CurrentItemReviewerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOItemLinesByReviewerID", oItemIDParameter, currentItemReviewerIDParameter);
        }
    
        public virtual ObjectResult<spGetOpenItemsTypes_Result> spGetOpenItemsTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOpenItemsTypes_Result>("spGetOpenItemsTypes");
        }
    
        public virtual ObjectResult<spGetOrgAndOrgCodeList_Result> spGetOrgAndOrgCodeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrgAndOrgCodeList_Result>("spGetOrgAndOrgCodeList");
        }
    
        public virtual ObjectResult<spGetOrganizationsForUpload_Result> spGetOrganizationsForUpload()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrganizationsForUpload_Result>("spGetOrganizationsForUpload");
        }
    
        public virtual ObjectResult<string> spGetOrganizationsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetOrganizationsList");
        }
    
        public virtual int spGetOrgCodesByDocNumber(string docNumber, Nullable<int> loadID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOrgCodesByDocNumber", docNumberParameter, loadIDParameter);
        }
    
        public virtual ObjectResult<spGetOrgItemPerLoadID_Result> spGetOrgItemPerLoadID(string loadID)
        {
            var loadIDParameter = loadID != null ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetOrgItemPerLoadID_Result>("spGetOrgItemPerLoadID", loadIDParameter);
        }
    
        public virtual ObjectResult<string> spGetOrgNameByOrgCode(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetOrgNameByOrgCode", orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetPaidDays_FSReport_Result> spGetPaidDays_FSReport(string fiscalYear, string bookMonth)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPaidDays_FSReport_Result>("spGetPaidDays_FSReport", fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual ObjectResult<spGetReasonForDelay_Result> spGetReasonForDelay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReasonForDelay_Result>("spGetReasonForDelay");
        }
    
        public virtual ObjectResult<spGetReassignOrgList_Result> spGetReassignOrgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReassignOrgList_Result>("spGetReassignOrgList");
        }
    
        public virtual int spGetReassignUsersOrgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetReassignUsersOrgList");
        }
    
        public virtual int spGetRerouteReqList(Nullable<int> loadID, string organization)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRerouteReqList", loadIDParameter, organizationParameter);
        }
    
        public virtual int spGetRerouteRequestDetails(Nullable<int> requestID, Nullable<bool> beforeReroute)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var beforeRerouteParameter = beforeReroute.HasValue ?
                new ObjectParameter("BeforeReroute", beforeReroute) :
                new ObjectParameter("BeforeReroute", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRerouteRequestDetails", requestIDParameter, beforeRerouteParameter);
        }
    
        public virtual ObjectResult<spGetReviewerReasonCodes_Result> spGetReviewerReasonCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReviewerReasonCodes_Result>("spGetReviewerReasonCodes");
        }
    
        public virtual ObjectResult<spGetRRequestDetails_History_Result> spGetRRequestDetails_History(Nullable<int> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRRequestDetails_History_Result>("spGetRRequestDetails_History", requestIDParameter);
        }
    
        public virtual int spGetRWA_FSReport(string orgCode, string fiscalYear, string bookMonth, string reportFunction)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var reportFunctionParameter = reportFunction != null ?
                new ObjectParameter("ReportFunction", reportFunction) :
                new ObjectParameter("ReportFunction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetRWA_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter, reportFunctionParameter);
        }
    
        public virtual ObjectResult<spGetStates_Result> spGetStates(string templateName)
        {
            var templateNameParameter = templateName != null ?
                new ObjectParameter("TemplateName", templateName) :
                new ObjectParameter("TemplateName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStates_Result>("spGetStates", templateNameParameter);
        }
    
        public virtual ObjectResult<string> spGetSumFunct_FSReport(string fiscalYear, string orgCode, string reportFuncCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var reportFuncCodeParameter = reportFuncCode != null ?
                new ObjectParameter("ReportFuncCode", reportFuncCode) :
                new ObjectParameter("ReportFuncCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetSumFunct_FSReport", fiscalYearParameter, orgCodeParameter, reportFuncCodeParameter);
        }
    
        public virtual ObjectResult<spGetSummaryReportState_Result> spGetSummaryReportState(string fiscalYear, string orgCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSummaryReportState_Result>("spGetSummaryReportState", fiscalYearParameter, orgCodeParameter);
        }
    
        public virtual ObjectResult<spGetTeamCodes_Result> spGetTeamCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetTeamCodes_Result>("spGetTeamCodes");
        }
    
        public virtual int spGetTrainingAmount_FSReport(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTrainingAmount_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual int spGetTrainingDocList_FSReport(string orgCode, string fiscalYear, string bookMonth)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetTrainingDocList_FSReport", orgCodeParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual int spGetUserByUserEmail(string userEmail)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserByUserEmail", userEmailParameter);
        }
    
        public virtual int spGetUserByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserByUserID", userIDParameter);
        }
    
        public virtual int spGetUserByUsername(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserByUsername", usernameParameter);
        }
    
        public virtual int spGetUserDetails(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserDetails", userIDParameter);
        }
    
        public virtual int spGetUserEmailByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserEmailByUserID", userIDParameter);
        }
    
        public virtual int spGetUsersByRole(string role)
        {
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUsersByRole", roleParameter);
        }
    
        public virtual int spGetUsersForCustomEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUsersForCustomEmail");
        }
    
        public virtual int spGetUsersList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUsersList");
        }
    
        public virtual int spGetUsersOnFSDataUpload()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUsersOnFSDataUpload");
        }
    
        public virtual ObjectResult<spGetValidationValues_Result> spGetValidationValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetValidationValues_Result>("spGetValidationValues");
        }
    
        public virtual ObjectResult<spGetWholeOrgList_Result> spGetWholeOrgList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetWholeOrgList_Result>("spGetWholeOrgList");
        }
    
        public virtual int spInsertEmailRequest(Nullable<int> senderUserID, Nullable<int> historyAction, Nullable<int> emailStatus, ObjectParameter emailRequestID)
        {
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var emailStatusParameter = emailStatus.HasValue ?
                new ObjectParameter("EmailStatus", emailStatus) :
                new ObjectParameter("EmailStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertEmailRequest", senderUserIDParameter, historyActionParameter, emailStatusParameter, emailRequestID);
        }
    
        public virtual int spInsertEntryData_FSReport(Nullable<int> entryType, string fiscalYear, string bookMonth, string orgCode, string functionCode, string oCCode, string docNumber, Nullable<decimal> amount, string explanation, Nullable<int> userID)
        {
            var entryTypeParameter = entryType.HasValue ?
                new ObjectParameter("EntryType", entryType) :
                new ObjectParameter("EntryType", typeof(int));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var explanationParameter = explanation != null ?
                new ObjectParameter("Explanation", explanation) :
                new ObjectParameter("Explanation", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertEntryData_FSReport", entryTypeParameter, fiscalYearParameter, bookMonthParameter, orgCodeParameter, functionCodeParameter, oCCodeParameter, docNumberParameter, amountParameter, explanationParameter, userIDParameter);
        }
    
        public virtual int spInsertHistory(Nullable<int> action, Nullable<int> loadID, Nullable<int> oItemID, string origOrgCode, string uLOOrgCode, string docNumber, Nullable<int> lineNum, Nullable<int> status, Nullable<int> valid, string code, Nullable<int> justification, string justificationAddOn, Nullable<int> reviewer, Nullable<int> newReviewer, string comments, Nullable<int> customNumeric, string custom01, string custom02, string custom03, Nullable<int> updateUser, Nullable<int> emailRequestID, string fiscalYear, string bookMonth)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var origOrgCodeParameter = origOrgCode != null ?
                new ObjectParameter("OrigOrgCode", origOrgCode) :
                new ObjectParameter("OrigOrgCode", typeof(string));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var justificationParameter = justification.HasValue ?
                new ObjectParameter("Justification", justification) :
                new ObjectParameter("Justification", typeof(int));
    
            var justificationAddOnParameter = justificationAddOn != null ?
                new ObjectParameter("JustificationAddOn", justificationAddOn) :
                new ObjectParameter("JustificationAddOn", typeof(string));
    
            var reviewerParameter = reviewer.HasValue ?
                new ObjectParameter("Reviewer", reviewer) :
                new ObjectParameter("Reviewer", typeof(int));
    
            var newReviewerParameter = newReviewer.HasValue ?
                new ObjectParameter("NewReviewer", newReviewer) :
                new ObjectParameter("NewReviewer", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var customNumericParameter = customNumeric.HasValue ?
                new ObjectParameter("CustomNumeric", customNumeric) :
                new ObjectParameter("CustomNumeric", typeof(int));
    
            var custom01Parameter = custom01 != null ?
                new ObjectParameter("Custom01", custom01) :
                new ObjectParameter("Custom01", typeof(string));
    
            var custom02Parameter = custom02 != null ?
                new ObjectParameter("Custom02", custom02) :
                new ObjectParameter("Custom02", typeof(string));
    
            var custom03Parameter = custom03 != null ?
                new ObjectParameter("Custom03", custom03) :
                new ObjectParameter("Custom03", typeof(string));
    
            var updateUserParameter = updateUser.HasValue ?
                new ObjectParameter("UpdateUser", updateUser) :
                new ObjectParameter("UpdateUser", typeof(int));
    
            var emailRequestIDParameter = emailRequestID.HasValue ?
                new ObjectParameter("EmailRequestID", emailRequestID) :
                new ObjectParameter("EmailRequestID", typeof(int));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertHistory", actionParameter, loadIDParameter, oItemIDParameter, origOrgCodeParameter, uLOOrgCodeParameter, docNumberParameter, lineNumParameter, statusParameter, validParameter, codeParameter, justificationParameter, justificationAddOnParameter, reviewerParameter, newReviewerParameter, commentsParameter, customNumericParameter, custom01Parameter, custom02Parameter, custom03Parameter, updateUserParameter, emailRequestIDParameter, fiscalYearParameter, bookMonthParameter);
        }
    
        public virtual int spInsertNewFile_toDelete(string fileName, Nullable<int> fileSize, byte[] fileData, string contentType, ObjectParameter fileID)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var fileDataParameter = fileData != null ?
                new ObjectParameter("FileData", fileData) :
                new ObjectParameter("FileData", typeof(byte[]));
    
            var contentTypeParameter = contentType != null ?
                new ObjectParameter("ContentType", contentType) :
                new ObjectParameter("ContentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewFile_toDelete", fileNameParameter, fileSizeParameter, fileDataParameter, contentTypeParameter, fileID);
        }
    
        public virtual int spInsertNewLoad(Nullable<int> dataSource, Nullable<int> oIType, Nullable<System.DateTime> dueDate, Nullable<int> fileID, Nullable<int> parentLoadID, Nullable<int> reviewRound, ObjectParameter loadID, string loadName)
        {
            var dataSourceParameter = dataSource.HasValue ?
                new ObjectParameter("DataSource", dataSource) :
                new ObjectParameter("DataSource", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var parentLoadIDParameter = parentLoadID.HasValue ?
                new ObjectParameter("ParentLoadID", parentLoadID) :
                new ObjectParameter("ParentLoadID", typeof(int));
    
            var reviewRoundParameter = reviewRound.HasValue ?
                new ObjectParameter("ReviewRound", reviewRound) :
                new ObjectParameter("ReviewRound", typeof(int));
    
            var loadNameParameter = loadName != null ?
                new ObjectParameter("LoadName", loadName) :
                new ObjectParameter("LoadName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewLoad", dataSourceParameter, oITypeParameter, dueDateParameter, fileIDParameter, parentLoadIDParameter, reviewRoundParameter, loadID, loadNameParameter);
        }
    
        public virtual int spInsertNewOrgCode(string orgCode)
        {
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertNewOrgCode", orgCodeParameter);
        }
    
        public virtual int spInsertOIDetails(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails", loadIDParameter);
        }
    
        public virtual int spInsertOIDetails_040810(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails_040810", loadIDParameter);
        }
    
        public virtual int spInsertOIDetails_051210(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails_051210", loadIDParameter);
        }
    
        public virtual int spInsertOIDetails_051310(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails_051310", loadIDParameter);
        }
    
        public virtual int spInsertOIDetails_071910(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails_071910", loadIDParameter);
        }
    
        public virtual int spInsertOIDetails_101810(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIDetails_101810", loadIDParameter);
        }
    
        public virtual int spInsertOILease(Nullable<int> loadID, Nullable<System.DateTime> reportDate)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOILease", loadIDParameter, reportDateParameter);
        }
    
        public virtual int spInsertOIMain(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_040810(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_040810", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_051210(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_051210", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_051310(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_051310", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_051910(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_051910", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_071910(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_071910", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIMain_101810(Nullable<int> loadID, Nullable<int> oIType)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var oITypeParameter = oIType.HasValue ?
                new ObjectParameter("OIType", oIType) :
                new ObjectParameter("OIType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIMain_101810", loadIDParameter, oITypeParameter);
        }
    
        public virtual int spInsertOIOrganization(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIOrganization", loadIDParameter);
        }
    
        public virtual int spInsertOIOrganization_01262010(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIOrganization_01262010", loadIDParameter);
        }
    
        public virtual int spInsertOIOrganization_051210(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertOIOrganization_051210", loadIDParameter);
        }
    
        public virtual int spInsertReviewFeedback(Nullable<int> loadID, Nullable<int> parentLoadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var parentLoadIDParameter = parentLoadID.HasValue ?
                new ObjectParameter("ParentLoadID", parentLoadID) :
                new ObjectParameter("ParentLoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertReviewFeedback", loadIDParameter, parentLoadIDParameter);
        }
    
        public virtual int spInsertSentEmail(string emailTo, string emailCc, string subject)
        {
            var emailToParameter = emailTo != null ?
                new ObjectParameter("EmailTo", emailTo) :
                new ObjectParameter("EmailTo", typeof(string));
    
            var emailCcParameter = emailCc != null ?
                new ObjectParameter("EmailCc", emailCc) :
                new ObjectParameter("EmailCc", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertSentEmail", emailToParameter, emailCcParameter, subjectParameter);
        }
    
        public virtual ObjectResult<spNullOrgRecordsInDetailsTable_Result> spNullOrgRecordsInDetailsTable(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNullOrgRecordsInDetailsTable_Result>("spNullOrgRecordsInDetailsTable", loadIDParameter);
        }
    
        public virtual ObjectResult<spNullOrgRecordsInOrgTable_Result> spNullOrgRecordsInOrgTable(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNullOrgRecordsInOrgTable_Result>("spNullOrgRecordsInOrgTable", loadIDParameter);
        }
    
        public virtual int spOItemCanBeRerouted_toDelete(Nullable<int> oItemID, string uLOOrgCode, ObjectParameter returnCode)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOItemCanBeRerouted_toDelete", oItemIDParameter, uLOOrgCodeParameter, returnCode);
        }
    
        public virtual ObjectResult<spPendingDeobligateByOrg_Result> spPendingDeobligateByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPendingDeobligateByOrg_Result>("spPendingDeobligateByOrg", loadIDParameter);
        }
    
        public virtual ObjectResult<spPendingNAOItemsByOrg_Result> spPendingNAOItemsByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPendingNAOItemsByOrg_Result>("spPendingNAOItemsByOrg", loadIDParameter);
        }
    
        public virtual int spPendingOItems(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPendingOItems", loadIDParameter);
        }
    
        public virtual ObjectResult<spPendingOItemsByOrg_Result> spPendingOItemsByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPendingOItemsByOrg_Result>("spPendingOItemsByOrg", loadIDParameter);
        }
    
        public virtual int spPendingOItemsByUser(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPendingOItemsByUser", loadIDParameter);
        }
    
        public virtual int spReassignItem(Nullable<int> oItemID, string uLOOrgCode, Nullable<int> reviewerUserID, Nullable<int> newReviewerID, string comments, Nullable<int> status)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            var newReviewerIDParameter = newReviewerID.HasValue ?
                new ObjectParameter("NewReviewerID", newReviewerID) :
                new ObjectParameter("NewReviewerID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReassignItem", oItemIDParameter, uLOOrgCodeParameter, reviewerUserIDParameter, newReviewerIDParameter, commentsParameter, statusParameter);
        }
    
        public virtual int spRejectApprove(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<int> loadID, string docNumber, Nullable<int> reviewerUserID, Nullable<int> status, string reasonForRejection, Nullable<int> action)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var reasonForRejectionParameter = reasonForRejection != null ?
                new ObjectParameter("ReasonForRejection", reasonForRejection) :
                new ObjectParameter("ReasonForRejection", typeof(string));
    
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRejectApprove", oItemIDParameter, lineNumParameter, loadIDParameter, docNumberParameter, reviewerUserIDParameter, statusParameter, reasonForRejectionParameter, actionParameter);
        }
    
        public virtual int spReportCOTotal(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReportCOTotal", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportDaily_Result> spReportDaily(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportDaily_Result>("spReportDaily", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportDailyDeobligated_Result> spReportDailyDeobligated(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportDailyDeobligated_Result>("spReportDailyDeobligated", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportDeobligatedByOrg_Result> spReportDeobligatedByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportDeobligatedByOrg_Result>("spReportDeobligatedByOrg", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportSentDocNumByOrg_Result> spReportSentDocNumByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportSentDocNumByOrg_Result>("spReportSentDocNumByOrg", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportTotalByOrg_Result> spReportTotalByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportTotalByOrg_Result>("spReportTotalByOrg", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportTotalByValid_Result> spReportTotalByValid(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportTotalByValid_Result>("spReportTotalByValid", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportTotalDeobligated_Result> spReportTotalDeobligated(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportTotalDeobligated_Result>("spReportTotalDeobligated", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportTotalDocNumByOrg_Result> spReportTotalDocNumByOrg(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportTotalDocNumByOrg_Result>("spReportTotalDocNumByOrg", loadIDParameter);
        }
    
        public virtual ObjectResult<spReportTotalSum_Result> spReportTotalSum(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReportTotalSum_Result>("spReportTotalSum", loadIDParameter);
        }
    
        public virtual int spReportValidationByLine(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReportValidationByLine", loadIDParameter);
        }
    
        public virtual int spRequestRerouteItem(Nullable<int> oItemID, string uLOOrgCode, Nullable<int> lineNum, Nullable<int> reviewerUserID, string respOrg, string newRespOrg, string newOrgCode, Nullable<int> newReviewerID, string comments, Nullable<int> status, ObjectParameter requestID)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            var respOrgParameter = respOrg != null ?
                new ObjectParameter("RespOrg", respOrg) :
                new ObjectParameter("RespOrg", typeof(string));
    
            var newRespOrgParameter = newRespOrg != null ?
                new ObjectParameter("NewRespOrg", newRespOrg) :
                new ObjectParameter("NewRespOrg", typeof(string));
    
            var newOrgCodeParameter = newOrgCode != null ?
                new ObjectParameter("NewOrgCode", newOrgCode) :
                new ObjectParameter("NewOrgCode", typeof(string));
    
            var newReviewerIDParameter = newReviewerID.HasValue ?
                new ObjectParameter("NewReviewerID", newReviewerID) :
                new ObjectParameter("NewReviewerID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRequestRerouteItem", oItemIDParameter, uLOOrgCodeParameter, lineNumParameter, reviewerUserIDParameter, respOrgParameter, newRespOrgParameter, newOrgCodeParameter, newReviewerIDParameter, commentsParameter, statusParameter, requestID);
        }
    
        public virtual int spRerouteItem(Nullable<int> oItemID, Nullable<int> itemLNum, Nullable<int> reviewerUserID, string uLOOrgCode, string newRespOrg, string newOrgCode, Nullable<int> newReviewerID, string comments, Nullable<int> rerouteRequestID, ObjectParameter returnCode)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var itemLNumParameter = itemLNum.HasValue ?
                new ObjectParameter("ItemLNum", itemLNum) :
                new ObjectParameter("ItemLNum", typeof(int));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var newRespOrgParameter = newRespOrg != null ?
                new ObjectParameter("NewRespOrg", newRespOrg) :
                new ObjectParameter("NewRespOrg", typeof(string));
    
            var newOrgCodeParameter = newOrgCode != null ?
                new ObjectParameter("NewOrgCode", newOrgCode) :
                new ObjectParameter("NewOrgCode", typeof(string));
    
            var newReviewerIDParameter = newReviewerID.HasValue ?
                new ObjectParameter("NewReviewerID", newReviewerID) :
                new ObjectParameter("NewReviewerID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var rerouteRequestIDParameter = rerouteRequestID.HasValue ?
                new ObjectParameter("RerouteRequestID", rerouteRequestID) :
                new ObjectParameter("RerouteRequestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRerouteItem", oItemIDParameter, itemLNumParameter, reviewerUserIDParameter, uLOOrgCodeParameter, newRespOrgParameter, newOrgCodeParameter, newReviewerIDParameter, commentsParameter, rerouteRequestIDParameter, returnCode);
        }
    
        public virtual int spRerouteItemByRequest(Nullable<int> requestID, string newRespOrg, string newOrgCode, Nullable<int> newReviewerID, string comments, ObjectParameter returnCode)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var newRespOrgParameter = newRespOrg != null ?
                new ObjectParameter("NewRespOrg", newRespOrg) :
                new ObjectParameter("NewRespOrg", typeof(string));
    
            var newOrgCodeParameter = newOrgCode != null ?
                new ObjectParameter("NewOrgCode", newOrgCode) :
                new ObjectParameter("NewOrgCode", typeof(string));
    
            var newReviewerIDParameter = newReviewerID.HasValue ?
                new ObjectParameter("NewReviewerID", newReviewerID) :
                new ObjectParameter("NewReviewerID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRerouteItemByRequest", requestIDParameter, newRespOrgParameter, newOrgCodeParameter, newReviewerIDParameter, commentsParameter, returnCode);
        }
    
        public virtual int spSaveAttachment(string docNumber, Nullable<int> docID, string lineNums, string comment, Nullable<int> loadID, Nullable<int> updateUserID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var lineNumsParameter = lineNums != null ?
                new ObjectParameter("LineNums", lineNums) :
                new ObjectParameter("LineNums", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveAttachment", docNumberParameter, docIDParameter, lineNumsParameter, commentParameter, loadIDParameter, updateUserIDParameter);
        }
    
        public virtual int spSaveFYAllowance(Nullable<int> allowRecordID, string fiscalYear, Nullable<decimal> amount, string monthList, Nullable<int> monthCount, Nullable<int> updateUserID)
        {
            var allowRecordIDParameter = allowRecordID.HasValue ?
                new ObjectParameter("AllowRecordID", allowRecordID) :
                new ObjectParameter("AllowRecordID", typeof(int));
    
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var monthListParameter = monthList != null ?
                new ObjectParameter("MonthList", monthList) :
                new ObjectParameter("MonthList", typeof(string));
    
            var monthCountParameter = monthCount.HasValue ?
                new ObjectParameter("MonthCount", monthCount) :
                new ObjectParameter("MonthCount", typeof(int));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveFYAllowance", allowRecordIDParameter, fiscalYearParameter, amountParameter, monthListParameter, monthCountParameter, updateUserIDParameter);
        }
    
        public virtual int spSaveJustification(string justificationDescription, Nullable<int> justification, Nullable<bool> displayAddOnField, string addOnDescription)
        {
            var justificationDescriptionParameter = justificationDescription != null ?
                new ObjectParameter("JustificationDescription", justificationDescription) :
                new ObjectParameter("JustificationDescription", typeof(string));
    
            var justificationParameter = justification.HasValue ?
                new ObjectParameter("Justification", justification) :
                new ObjectParameter("Justification", typeof(int));
    
            var displayAddOnFieldParameter = displayAddOnField.HasValue ?
                new ObjectParameter("DisplayAddOnField", displayAddOnField) :
                new ObjectParameter("DisplayAddOnField", typeof(bool));
    
            var addOnDescriptionParameter = addOnDescription != null ?
                new ObjectParameter("AddOnDescription", addOnDescription) :
                new ObjectParameter("AddOnDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveJustification", justificationDescriptionParameter, justificationParameter, displayAddOnFieldParameter, addOnDescriptionParameter);
        }
    
        public virtual int spSavePercentByFunc(string fiscalYear, string bookMonth, string orgCode, Nullable<decimal> percent, Nullable<int> updateUserID, string functionCode, string oCCode)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(decimal));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            var functionCodeParameter = functionCode != null ?
                new ObjectParameter("FunctionCode", functionCode) :
                new ObjectParameter("FunctionCode", typeof(string));
    
            var oCCodeParameter = oCCode != null ?
                new ObjectParameter("OCCode", oCCode) :
                new ObjectParameter("OCCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSavePercentByFunc", fiscalYearParameter, bookMonthParameter, orgCodeParameter, percentParameter, updateUserIDParameter, functionCodeParameter, oCCodeParameter);
        }
    
        public virtual int spSavePercentByOrg(string fiscalYear, string bookMonth, string orgCode, Nullable<decimal> percent, Nullable<int> updateUserID)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var bookMonthParameter = bookMonth != null ?
                new ObjectParameter("BookMonth", bookMonth) :
                new ObjectParameter("BookMonth", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var percentParameter = percent.HasValue ?
                new ObjectParameter("Percent", percent) :
                new ObjectParameter("Percent", typeof(decimal));
    
            var updateUserIDParameter = updateUserID.HasValue ?
                new ObjectParameter("UpdateUserID", updateUserID) :
                new ObjectParameter("UpdateUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSavePercentByOrg", fiscalYearParameter, bookMonthParameter, orgCodeParameter, percentParameter, updateUserIDParameter);
        }
    
        public virtual int spSaveUser(Nullable<int> userID, string email, string password, string roleCode, Nullable<bool> active, string firstName, string lastName, string middleInitial, string organization, string phone, Nullable<short> defaultApplication)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleInitialParameter = middleInitial != null ?
                new ObjectParameter("MiddleInitial", middleInitial) :
                new ObjectParameter("MiddleInitial", typeof(string));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var defaultApplicationParameter = defaultApplication.HasValue ?
                new ObjectParameter("DefaultApplication", defaultApplication) :
                new ObjectParameter("DefaultApplication", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveUser", userIDParameter, emailParameter, passwordParameter, roleCodeParameter, activeParameter, firstNameParameter, lastNameParameter, middleInitialParameter, organizationParameter, phoneParameter, defaultApplicationParameter);
        }
    
        public virtual int spSearchItems(Nullable<int> loadID, string organization, string docNumber, string projNum, string bA, string awardNumber)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var organizationParameter = organization != null ?
                new ObjectParameter("Organization", organization) :
                new ObjectParameter("Organization", typeof(string));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var projNumParameter = projNum != null ?
                new ObjectParameter("ProjNum", projNum) :
                new ObjectParameter("ProjNum", typeof(string));
    
            var bAParameter = bA != null ?
                new ObjectParameter("BA", bA) :
                new ObjectParameter("BA", typeof(string));
    
            var awardNumberParameter = awardNumber != null ?
                new ObjectParameter("AwardNumber", awardNumber) :
                new ObjectParameter("AwardNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSearchItems", loadIDParameter, organizationParameter, docNumberParameter, projNumParameter, bAParameter, awardNumberParameter);
        }
    
        public virtual int spSelectAttForRevision(string docNumber, Nullable<int> docID, Nullable<int> loadID, Nullable<bool> selected)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSelectAttForRevision", docNumberParameter, docIDParameter, loadIDParameter, selectedParameter);
        }
    
        public virtual int spSelectSendAttachment(string docNumber, Nullable<int> docID, Nullable<int> loadID, Nullable<bool> selected)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var selectedParameter = selected.HasValue ?
                new ObjectParameter("Selected", selected) :
                new ObjectParameter("Selected", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSelectSendAttachment", docNumberParameter, docIDParameter, loadIDParameter, selectedParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spTestAvailableMonth(string monthArray)
        {
            var monthArrayParameter = monthArray != null ?
                new ObjectParameter("MonthArray", monthArray) :
                new ObjectParameter("MonthArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spTestAvailableMonth", monthArrayParameter);
        }
    
        public virtual int spUnarchiveLoad(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUnarchiveLoad", loadIDParameter);
        }
    
        public virtual int spUpdateAccrualType(Nullable<int> loadID)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAccrualType", loadIDParameter);
        }
    
        public virtual int spUpdateDocRevision(string docNumber, Nullable<int> docID, Nullable<int> docTypeCode, Nullable<int> loadID, Nullable<short> status)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var docTypeCodeParameter = docTypeCode.HasValue ?
                new ObjectParameter("DocTypeCode", docTypeCode) :
                new ObjectParameter("DocTypeCode", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDocRevision", docNumberParameter, docIDParameter, docTypeCodeParameter, loadIDParameter, statusParameter);
        }
    
        public virtual int spUpdateEmailReqStatus(Nullable<int> requestID, Nullable<int> emailStatus, Nullable<int> historyAction, Nullable<int> senderUserID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var emailStatusParameter = emailStatus.HasValue ?
                new ObjectParameter("EmailStatus", emailStatus) :
                new ObjectParameter("EmailStatus", typeof(int));
    
            var historyActionParameter = historyAction.HasValue ?
                new ObjectParameter("HistoryAction", historyAction) :
                new ObjectParameter("HistoryAction", typeof(int));
    
            var senderUserIDParameter = senderUserID.HasValue ?
                new ObjectParameter("SenderUserID", senderUserID) :
                new ObjectParameter("SenderUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmailReqStatus", requestIDParameter, emailStatusParameter, historyActionParameter, senderUserIDParameter);
        }
    
        public virtual int spUpdateEntryData_FSReport(Nullable<int> entryID, string docNumber, Nullable<decimal> amount, string explanation, Nullable<int> userID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var explanationParameter = explanation != null ?
                new ObjectParameter("Explanation", explanation) :
                new ObjectParameter("Explanation", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEntryData_FSReport", entryIDParameter, docNumberParameter, amountParameter, explanationParameter, userIDParameter);
        }
    
        public virtual int spUpdateFeedback(Nullable<int> oItemID, string docNumber, Nullable<int> loadID, Nullable<int> valid, string response, Nullable<decimal> uDOShouldBe, Nullable<decimal> dOShouldBe)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            var uDOShouldBeParameter = uDOShouldBe.HasValue ?
                new ObjectParameter("UDOShouldBe", uDOShouldBe) :
                new ObjectParameter("UDOShouldBe", typeof(decimal));
    
            var dOShouldBeParameter = dOShouldBe.HasValue ?
                new ObjectParameter("DOShouldBe", dOShouldBe) :
                new ObjectParameter("DOShouldBe", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFeedback", oItemIDParameter, docNumberParameter, loadIDParameter, validParameter, responseParameter, uDOShouldBeParameter, dOShouldBeParameter);
        }
    
        public virtual int spUpdateFSReportStatus(string fiscalYear, string orgCode, Nullable<int> status)
        {
            var fiscalYearParameter = fiscalYear != null ?
                new ObjectParameter("FiscalYear", fiscalYear) :
                new ObjectParameter("FiscalYear", typeof(string));
    
            var orgCodeParameter = orgCode != null ?
                new ObjectParameter("OrgCode", orgCode) :
                new ObjectParameter("OrgCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateFSReportStatus", fiscalYearParameter, orgCodeParameter, statusParameter);
        }
    
        public virtual int spUpdateItemProperties(Nullable<int> oItemID, string uLOOrgCode, Nullable<decimal> uDOShouldBe, Nullable<decimal> dOShouldBe, Nullable<System.DateTime> expCompDate, string comments)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var uDOShouldBeParameter = uDOShouldBe.HasValue ?
                new ObjectParameter("UDOShouldBe", uDOShouldBe) :
                new ObjectParameter("UDOShouldBe", typeof(decimal));
    
            var dOShouldBeParameter = dOShouldBe.HasValue ?
                new ObjectParameter("DOShouldBe", dOShouldBe) :
                new ObjectParameter("DOShouldBe", typeof(decimal));
    
            var expCompDateParameter = expCompDate.HasValue ?
                new ObjectParameter("ExpCompDate", expCompDate) :
                new ObjectParameter("ExpCompDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateItemProperties", oItemIDParameter, uLOOrgCodeParameter, uDOShouldBeParameter, dOShouldBeParameter, expCompDateParameter, commentsParameter);
        }
    
        public virtual int spUpdateItemStatus(Nullable<int> oItemID, Nullable<int> loadID, string uLOOrgCode, Nullable<int> reviewerUserID, Nullable<int> status)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var uLOOrgCodeParameter = uLOOrgCode != null ?
                new ObjectParameter("ULOOrgCode", uLOOrgCode) :
                new ObjectParameter("ULOOrgCode", typeof(string));
    
            var reviewerUserIDParameter = reviewerUserID.HasValue ?
                new ObjectParameter("ReviewerUserID", reviewerUserID) :
                new ObjectParameter("ReviewerUserID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateItemStatus", oItemIDParameter, loadIDParameter, uLOOrgCodeParameter, reviewerUserIDParameter, statusParameter);
        }
    
        public virtual int spUpdateLineBA53CLAIM(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, string projectNo, Nullable<System.DateTime> leaseEffectiveDate, Nullable<decimal> annualRent, Nullable<decimal> rSF, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var projectNoParameter = projectNo != null ?
                new ObjectParameter("ProjectNo", projectNo) :
                new ObjectParameter("ProjectNo", typeof(string));
    
            var leaseEffectiveDateParameter = leaseEffectiveDate.HasValue ?
                new ObjectParameter("LeaseEffectiveDate", leaseEffectiveDate) :
                new ObjectParameter("LeaseEffectiveDate", typeof(System.DateTime));
    
            var annualRentParameter = annualRent.HasValue ?
                new ObjectParameter("AnnualRent", annualRent) :
                new ObjectParameter("AnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53CLAIM", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, projectNoParameter, leaseEffectiveDateParameter, annualRentParameter, rSFParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter);
        }
    
        public virtual int spUpdateLineBA53CPI(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, Nullable<System.DateTime> leaseEffectiveDate, Nullable<decimal> annualRent, Nullable<decimal> rSF, Nullable<decimal> fY_2_CPI_EscalationExpense, Nullable<decimal> fY_1_CPI_EscalationExpense, Nullable<decimal> fY_1_EscalationExpenseDiff, Nullable<decimal> fY_1_EscalationExpensePercIncrease, Nullable<decimal> fY_CPI_EscalationProjection, Nullable<decimal> fY_EscalationExpenseDiff, Nullable<decimal> fY_EscalationExpensePercIncrease, Nullable<decimal> annualIncreaseOfAction, Nullable<decimal> monthlyIncrease, Nullable<System.DateTime> effectiveDateOfAction, Nullable<int> totalMonths, Nullable<System.DateTime> fYEndDate, Nullable<decimal> totalMonthsCatchUp, Nullable<int> numberDaysProratedMonth, Nullable<decimal> totalDayCatchUp, Nullable<int> fY_YY, Nullable<decimal> totalCatchUp, Nullable<int> daysProrated, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var leaseEffectiveDateParameter = leaseEffectiveDate.HasValue ?
                new ObjectParameter("LeaseEffectiveDate", leaseEffectiveDate) :
                new ObjectParameter("LeaseEffectiveDate", typeof(System.DateTime));
    
            var annualRentParameter = annualRent.HasValue ?
                new ObjectParameter("AnnualRent", annualRent) :
                new ObjectParameter("AnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var fY_2_CPI_EscalationExpenseParameter = fY_2_CPI_EscalationExpense.HasValue ?
                new ObjectParameter("FY_2_CPI_EscalationExpense", fY_2_CPI_EscalationExpense) :
                new ObjectParameter("FY_2_CPI_EscalationExpense", typeof(decimal));
    
            var fY_1_CPI_EscalationExpenseParameter = fY_1_CPI_EscalationExpense.HasValue ?
                new ObjectParameter("FY_1_CPI_EscalationExpense", fY_1_CPI_EscalationExpense) :
                new ObjectParameter("FY_1_CPI_EscalationExpense", typeof(decimal));
    
            var fY_1_EscalationExpenseDiffParameter = fY_1_EscalationExpenseDiff.HasValue ?
                new ObjectParameter("FY_1_EscalationExpenseDiff", fY_1_EscalationExpenseDiff) :
                new ObjectParameter("FY_1_EscalationExpenseDiff", typeof(decimal));
    
            var fY_1_EscalationExpensePercIncreaseParameter = fY_1_EscalationExpensePercIncrease.HasValue ?
                new ObjectParameter("FY_1_EscalationExpensePercIncrease", fY_1_EscalationExpensePercIncrease) :
                new ObjectParameter("FY_1_EscalationExpensePercIncrease", typeof(decimal));
    
            var fY_CPI_EscalationProjectionParameter = fY_CPI_EscalationProjection.HasValue ?
                new ObjectParameter("FY_CPI_EscalationProjection", fY_CPI_EscalationProjection) :
                new ObjectParameter("FY_CPI_EscalationProjection", typeof(decimal));
    
            var fY_EscalationExpenseDiffParameter = fY_EscalationExpenseDiff.HasValue ?
                new ObjectParameter("FY_EscalationExpenseDiff", fY_EscalationExpenseDiff) :
                new ObjectParameter("FY_EscalationExpenseDiff", typeof(decimal));
    
            var fY_EscalationExpensePercIncreaseParameter = fY_EscalationExpensePercIncrease.HasValue ?
                new ObjectParameter("FY_EscalationExpensePercIncrease", fY_EscalationExpensePercIncrease) :
                new ObjectParameter("FY_EscalationExpensePercIncrease", typeof(decimal));
    
            var annualIncreaseOfActionParameter = annualIncreaseOfAction.HasValue ?
                new ObjectParameter("AnnualIncreaseOfAction", annualIncreaseOfAction) :
                new ObjectParameter("AnnualIncreaseOfAction", typeof(decimal));
    
            var monthlyIncreaseParameter = monthlyIncrease.HasValue ?
                new ObjectParameter("MonthlyIncrease", monthlyIncrease) :
                new ObjectParameter("MonthlyIncrease", typeof(decimal));
    
            var effectiveDateOfActionParameter = effectiveDateOfAction.HasValue ?
                new ObjectParameter("EffectiveDateOfAction", effectiveDateOfAction) :
                new ObjectParameter("EffectiveDateOfAction", typeof(System.DateTime));
    
            var totalMonthsParameter = totalMonths.HasValue ?
                new ObjectParameter("TotalMonths", totalMonths) :
                new ObjectParameter("TotalMonths", typeof(int));
    
            var fYEndDateParameter = fYEndDate.HasValue ?
                new ObjectParameter("FYEndDate", fYEndDate) :
                new ObjectParameter("FYEndDate", typeof(System.DateTime));
    
            var totalMonthsCatchUpParameter = totalMonthsCatchUp.HasValue ?
                new ObjectParameter("TotalMonthsCatchUp", totalMonthsCatchUp) :
                new ObjectParameter("TotalMonthsCatchUp", typeof(decimal));
    
            var numberDaysProratedMonthParameter = numberDaysProratedMonth.HasValue ?
                new ObjectParameter("NumberDaysProratedMonth", numberDaysProratedMonth) :
                new ObjectParameter("NumberDaysProratedMonth", typeof(int));
    
            var totalDayCatchUpParameter = totalDayCatchUp.HasValue ?
                new ObjectParameter("TotalDayCatchUp", totalDayCatchUp) :
                new ObjectParameter("TotalDayCatchUp", typeof(decimal));
    
            var fY_YYParameter = fY_YY.HasValue ?
                new ObjectParameter("FY_YY", fY_YY) :
                new ObjectParameter("FY_YY", typeof(int));
    
            var totalCatchUpParameter = totalCatchUp.HasValue ?
                new ObjectParameter("TotalCatchUp", totalCatchUp) :
                new ObjectParameter("TotalCatchUp", typeof(decimal));
    
            var daysProratedParameter = daysProrated.HasValue ?
                new ObjectParameter("DaysProrated", daysProrated) :
                new ObjectParameter("DaysProrated", typeof(int));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53CPI", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, leaseEffectiveDateParameter, annualRentParameter, rSFParameter, fY_2_CPI_EscalationExpenseParameter, fY_1_CPI_EscalationExpenseParameter, fY_1_EscalationExpenseDiffParameter, fY_1_EscalationExpensePercIncreaseParameter, fY_CPI_EscalationProjectionParameter, fY_EscalationExpenseDiffParameter, fY_EscalationExpensePercIncreaseParameter, annualIncreaseOfActionParameter, monthlyIncreaseParameter, effectiveDateOfActionParameter, totalMonthsParameter, fYEndDateParameter, totalMonthsCatchUpParameter, numberDaysProratedMonthParameter, totalDayCatchUpParameter, fY_YYParameter, totalCatchUpParameter, daysProratedParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter);
        }
    
        public virtual int spUpdateLineBA53Expension(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, string projectNo, Nullable<System.DateTime> leaseEffectiveDate, Nullable<decimal> annualRent, Nullable<decimal> rSF, Nullable<decimal> newProjectedAnnualRent, Nullable<decimal> annualIncreaseOfAction, Nullable<decimal> monthlyIncrease, Nullable<System.DateTime> effectiveDateOfAction, Nullable<int> totalMonths, Nullable<System.DateTime> fYEndDate, Nullable<decimal> totalMonthsCatchUp, Nullable<int> numberDaysProratedMonth, Nullable<int> daysProrated, Nullable<decimal> totalDayCatchUp, Nullable<int> fY_YY, Nullable<decimal> totalCatchUp, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var projectNoParameter = projectNo != null ?
                new ObjectParameter("ProjectNo", projectNo) :
                new ObjectParameter("ProjectNo", typeof(string));
    
            var leaseEffectiveDateParameter = leaseEffectiveDate.HasValue ?
                new ObjectParameter("LeaseEffectiveDate", leaseEffectiveDate) :
                new ObjectParameter("LeaseEffectiveDate", typeof(System.DateTime));
    
            var annualRentParameter = annualRent.HasValue ?
                new ObjectParameter("AnnualRent", annualRent) :
                new ObjectParameter("AnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var newProjectedAnnualRentParameter = newProjectedAnnualRent.HasValue ?
                new ObjectParameter("NewProjectedAnnualRent", newProjectedAnnualRent) :
                new ObjectParameter("NewProjectedAnnualRent", typeof(decimal));
    
            var annualIncreaseOfActionParameter = annualIncreaseOfAction.HasValue ?
                new ObjectParameter("AnnualIncreaseOfAction", annualIncreaseOfAction) :
                new ObjectParameter("AnnualIncreaseOfAction", typeof(decimal));
    
            var monthlyIncreaseParameter = monthlyIncrease.HasValue ?
                new ObjectParameter("MonthlyIncrease", monthlyIncrease) :
                new ObjectParameter("MonthlyIncrease", typeof(decimal));
    
            var effectiveDateOfActionParameter = effectiveDateOfAction.HasValue ?
                new ObjectParameter("EffectiveDateOfAction", effectiveDateOfAction) :
                new ObjectParameter("EffectiveDateOfAction", typeof(System.DateTime));
    
            var totalMonthsParameter = totalMonths.HasValue ?
                new ObjectParameter("TotalMonths", totalMonths) :
                new ObjectParameter("TotalMonths", typeof(int));
    
            var fYEndDateParameter = fYEndDate.HasValue ?
                new ObjectParameter("FYEndDate", fYEndDate) :
                new ObjectParameter("FYEndDate", typeof(System.DateTime));
    
            var totalMonthsCatchUpParameter = totalMonthsCatchUp.HasValue ?
                new ObjectParameter("TotalMonthsCatchUp", totalMonthsCatchUp) :
                new ObjectParameter("TotalMonthsCatchUp", typeof(decimal));
    
            var numberDaysProratedMonthParameter = numberDaysProratedMonth.HasValue ?
                new ObjectParameter("NumberDaysProratedMonth", numberDaysProratedMonth) :
                new ObjectParameter("NumberDaysProratedMonth", typeof(int));
    
            var daysProratedParameter = daysProrated.HasValue ?
                new ObjectParameter("DaysProrated", daysProrated) :
                new ObjectParameter("DaysProrated", typeof(int));
    
            var totalDayCatchUpParameter = totalDayCatchUp.HasValue ?
                new ObjectParameter("TotalDayCatchUp", totalDayCatchUp) :
                new ObjectParameter("TotalDayCatchUp", typeof(decimal));
    
            var fY_YYParameter = fY_YY.HasValue ?
                new ObjectParameter("FY_YY", fY_YY) :
                new ObjectParameter("FY_YY", typeof(int));
    
            var totalCatchUpParameter = totalCatchUp.HasValue ?
                new ObjectParameter("TotalCatchUp", totalCatchUp) :
                new ObjectParameter("TotalCatchUp", typeof(decimal));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53Expension", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, projectNoParameter, leaseEffectiveDateParameter, annualRentParameter, rSFParameter, newProjectedAnnualRentParameter, annualIncreaseOfActionParameter, monthlyIncreaseParameter, effectiveDateOfActionParameter, totalMonthsParameter, fYEndDateParameter, totalMonthsCatchUpParameter, numberDaysProratedMonthParameter, daysProratedParameter, totalDayCatchUpParameter, fY_YYParameter, totalCatchUpParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter);
        }
    
        public virtual int spUpdateLineBA53Holdover(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, Nullable<System.DateTime> leaseEffectiveDate, Nullable<System.DateTime> leaseExpirationDate, Nullable<decimal> annualRent, Nullable<decimal> rSF, string projectedLeaseNo, string projectedProjectNo, string projectedProspectusNo, Nullable<System.DateTime> projectedsLeaseEffectiveDate, Nullable<decimal> projectedAnnualRent, Nullable<decimal> projectedRSF, Nullable<decimal> currProjectedAnnualRent, Nullable<decimal> newProjectedAnnualRent, Nullable<decimal> annualIncreaseOfAction, Nullable<decimal> monthlyIncrease, Nullable<System.DateTime> effectiveDateOfAction, Nullable<int> totalMonths, Nullable<System.DateTime> currAuditEndDate, Nullable<decimal> totalMonthsCatchUp, Nullable<int> numberDaysProratedMonth, Nullable<int> daysProrated, Nullable<decimal> totalDayCatchUp, Nullable<int> fY_YY, Nullable<decimal> totalCatchUp, Nullable<decimal> establishedCurrentProjAnnualRent, Nullable<decimal> establishedNewProjAnnualRent, Nullable<decimal> establishedAnnualIncreaseOfAction, Nullable<decimal> establishedMonthlyIncrease, Nullable<System.DateTime> establishedEffectiveDateOfAction, Nullable<int> establishedTotalMonths, Nullable<System.DateTime> establishedFYEndDate, Nullable<decimal> establishedTotalMonthsCatchUp, Nullable<int> establishedNumberDaysProratedMonth, Nullable<int> establishedDaysProrated, Nullable<decimal> establishedTotalDayCatchUp, Nullable<int> fY_YY_Est, Nullable<decimal> establishedTotalCatchUp, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var leaseEffectiveDateParameter = leaseEffectiveDate.HasValue ?
                new ObjectParameter("LeaseEffectiveDate", leaseEffectiveDate) :
                new ObjectParameter("LeaseEffectiveDate", typeof(System.DateTime));
    
            var leaseExpirationDateParameter = leaseExpirationDate.HasValue ?
                new ObjectParameter("LeaseExpirationDate", leaseExpirationDate) :
                new ObjectParameter("LeaseExpirationDate", typeof(System.DateTime));
    
            var annualRentParameter = annualRent.HasValue ?
                new ObjectParameter("AnnualRent", annualRent) :
                new ObjectParameter("AnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var projectedLeaseNoParameter = projectedLeaseNo != null ?
                new ObjectParameter("ProjectedLeaseNo", projectedLeaseNo) :
                new ObjectParameter("ProjectedLeaseNo", typeof(string));
    
            var projectedProjectNoParameter = projectedProjectNo != null ?
                new ObjectParameter("ProjectedProjectNo", projectedProjectNo) :
                new ObjectParameter("ProjectedProjectNo", typeof(string));
    
            var projectedProspectusNoParameter = projectedProspectusNo != null ?
                new ObjectParameter("ProjectedProspectusNo", projectedProspectusNo) :
                new ObjectParameter("ProjectedProspectusNo", typeof(string));
    
            var projectedsLeaseEffectiveDateParameter = projectedsLeaseEffectiveDate.HasValue ?
                new ObjectParameter("ProjectedsLeaseEffectiveDate", projectedsLeaseEffectiveDate) :
                new ObjectParameter("ProjectedsLeaseEffectiveDate", typeof(System.DateTime));
    
            var projectedAnnualRentParameter = projectedAnnualRent.HasValue ?
                new ObjectParameter("ProjectedAnnualRent", projectedAnnualRent) :
                new ObjectParameter("ProjectedAnnualRent", typeof(decimal));
    
            var projectedRSFParameter = projectedRSF.HasValue ?
                new ObjectParameter("ProjectedRSF", projectedRSF) :
                new ObjectParameter("ProjectedRSF", typeof(decimal));
    
            var currProjectedAnnualRentParameter = currProjectedAnnualRent.HasValue ?
                new ObjectParameter("CurrProjectedAnnualRent", currProjectedAnnualRent) :
                new ObjectParameter("CurrProjectedAnnualRent", typeof(decimal));
    
            var newProjectedAnnualRentParameter = newProjectedAnnualRent.HasValue ?
                new ObjectParameter("NewProjectedAnnualRent", newProjectedAnnualRent) :
                new ObjectParameter("NewProjectedAnnualRent", typeof(decimal));
    
            var annualIncreaseOfActionParameter = annualIncreaseOfAction.HasValue ?
                new ObjectParameter("AnnualIncreaseOfAction", annualIncreaseOfAction) :
                new ObjectParameter("AnnualIncreaseOfAction", typeof(decimal));
    
            var monthlyIncreaseParameter = monthlyIncrease.HasValue ?
                new ObjectParameter("MonthlyIncrease", monthlyIncrease) :
                new ObjectParameter("MonthlyIncrease", typeof(decimal));
    
            var effectiveDateOfActionParameter = effectiveDateOfAction.HasValue ?
                new ObjectParameter("EffectiveDateOfAction", effectiveDateOfAction) :
                new ObjectParameter("EffectiveDateOfAction", typeof(System.DateTime));
    
            var totalMonthsParameter = totalMonths.HasValue ?
                new ObjectParameter("TotalMonths", totalMonths) :
                new ObjectParameter("TotalMonths", typeof(int));
    
            var currAuditEndDateParameter = currAuditEndDate.HasValue ?
                new ObjectParameter("CurrAuditEndDate", currAuditEndDate) :
                new ObjectParameter("CurrAuditEndDate", typeof(System.DateTime));
    
            var totalMonthsCatchUpParameter = totalMonthsCatchUp.HasValue ?
                new ObjectParameter("TotalMonthsCatchUp", totalMonthsCatchUp) :
                new ObjectParameter("TotalMonthsCatchUp", typeof(decimal));
    
            var numberDaysProratedMonthParameter = numberDaysProratedMonth.HasValue ?
                new ObjectParameter("NumberDaysProratedMonth", numberDaysProratedMonth) :
                new ObjectParameter("NumberDaysProratedMonth", typeof(int));
    
            var daysProratedParameter = daysProrated.HasValue ?
                new ObjectParameter("DaysProrated", daysProrated) :
                new ObjectParameter("DaysProrated", typeof(int));
    
            var totalDayCatchUpParameter = totalDayCatchUp.HasValue ?
                new ObjectParameter("TotalDayCatchUp", totalDayCatchUp) :
                new ObjectParameter("TotalDayCatchUp", typeof(decimal));
    
            var fY_YYParameter = fY_YY.HasValue ?
                new ObjectParameter("FY_YY", fY_YY) :
                new ObjectParameter("FY_YY", typeof(int));
    
            var totalCatchUpParameter = totalCatchUp.HasValue ?
                new ObjectParameter("TotalCatchUp", totalCatchUp) :
                new ObjectParameter("TotalCatchUp", typeof(decimal));
    
            var establishedCurrentProjAnnualRentParameter = establishedCurrentProjAnnualRent.HasValue ?
                new ObjectParameter("EstablishedCurrentProjAnnualRent", establishedCurrentProjAnnualRent) :
                new ObjectParameter("EstablishedCurrentProjAnnualRent", typeof(decimal));
    
            var establishedNewProjAnnualRentParameter = establishedNewProjAnnualRent.HasValue ?
                new ObjectParameter("EstablishedNewProjAnnualRent", establishedNewProjAnnualRent) :
                new ObjectParameter("EstablishedNewProjAnnualRent", typeof(decimal));
    
            var establishedAnnualIncreaseOfActionParameter = establishedAnnualIncreaseOfAction.HasValue ?
                new ObjectParameter("EstablishedAnnualIncreaseOfAction", establishedAnnualIncreaseOfAction) :
                new ObjectParameter("EstablishedAnnualIncreaseOfAction", typeof(decimal));
    
            var establishedMonthlyIncreaseParameter = establishedMonthlyIncrease.HasValue ?
                new ObjectParameter("EstablishedMonthlyIncrease", establishedMonthlyIncrease) :
                new ObjectParameter("EstablishedMonthlyIncrease", typeof(decimal));
    
            var establishedEffectiveDateOfActionParameter = establishedEffectiveDateOfAction.HasValue ?
                new ObjectParameter("EstablishedEffectiveDateOfAction", establishedEffectiveDateOfAction) :
                new ObjectParameter("EstablishedEffectiveDateOfAction", typeof(System.DateTime));
    
            var establishedTotalMonthsParameter = establishedTotalMonths.HasValue ?
                new ObjectParameter("EstablishedTotalMonths", establishedTotalMonths) :
                new ObjectParameter("EstablishedTotalMonths", typeof(int));
    
            var establishedFYEndDateParameter = establishedFYEndDate.HasValue ?
                new ObjectParameter("EstablishedFYEndDate", establishedFYEndDate) :
                new ObjectParameter("EstablishedFYEndDate", typeof(System.DateTime));
    
            var establishedTotalMonthsCatchUpParameter = establishedTotalMonthsCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalMonthsCatchUp", establishedTotalMonthsCatchUp) :
                new ObjectParameter("EstablishedTotalMonthsCatchUp", typeof(decimal));
    
            var establishedNumberDaysProratedMonthParameter = establishedNumberDaysProratedMonth.HasValue ?
                new ObjectParameter("EstablishedNumberDaysProratedMonth", establishedNumberDaysProratedMonth) :
                new ObjectParameter("EstablishedNumberDaysProratedMonth", typeof(int));
    
            var establishedDaysProratedParameter = establishedDaysProrated.HasValue ?
                new ObjectParameter("EstablishedDaysProrated", establishedDaysProrated) :
                new ObjectParameter("EstablishedDaysProrated", typeof(int));
    
            var establishedTotalDayCatchUpParameter = establishedTotalDayCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalDayCatchUp", establishedTotalDayCatchUp) :
                new ObjectParameter("EstablishedTotalDayCatchUp", typeof(decimal));
    
            var fY_YY_EstParameter = fY_YY_Est.HasValue ?
                new ObjectParameter("FY_YY_Est", fY_YY_Est) :
                new ObjectParameter("FY_YY_Est", typeof(int));
    
            var establishedTotalCatchUpParameter = establishedTotalCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalCatchUp", establishedTotalCatchUp) :
                new ObjectParameter("EstablishedTotalCatchUp", typeof(decimal));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53Holdover", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, leaseEffectiveDateParameter, leaseExpirationDateParameter, annualRentParameter, rSFParameter, projectedLeaseNoParameter, projectedProjectNoParameter, projectedProspectusNoParameter, projectedsLeaseEffectiveDateParameter, projectedAnnualRentParameter, projectedRSFParameter, currProjectedAnnualRentParameter, newProjectedAnnualRentParameter, annualIncreaseOfActionParameter, monthlyIncreaseParameter, effectiveDateOfActionParameter, totalMonthsParameter, currAuditEndDateParameter, totalMonthsCatchUpParameter, numberDaysProratedMonthParameter, daysProratedParameter, totalDayCatchUpParameter, fY_YYParameter, totalCatchUpParameter, establishedCurrentProjAnnualRentParameter, establishedNewProjAnnualRentParameter, establishedAnnualIncreaseOfActionParameter, establishedMonthlyIncreaseParameter, establishedEffectiveDateOfActionParameter, establishedTotalMonthsParameter, establishedFYEndDateParameter, establishedTotalMonthsCatchUpParameter, establishedNumberDaysProratedMonthParameter, establishedDaysProratedParameter, establishedTotalDayCatchUpParameter, fY_YY_EstParameter, establishedTotalCatchUpParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter);
        }
    
        public virtual int spUpdateLineBA53RET(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, Nullable<System.DateTime> leaseEffectiveDate, Nullable<decimal> annualRent, Nullable<decimal> rSF, string fY_FirstHalfTaxInvoiceDatePeriod, Nullable<decimal> fY_FirstHalfTaxInvoiceTotalTaxBill, Nullable<int> fY_FirstHalfTaxInvoiceNoOfMonReimb, Nullable<decimal> fY_FirstHalfTaxInvoiceReimbAmt, string fY_SecondHalfTaxInvoiceDatePeriod, Nullable<decimal> fY_SecondHalfTaxInvoiceTotalTaxBill, Nullable<int> fY_SecondHalfTaxInvoiceNoOfMonReimb, Nullable<decimal> fY_SecondHalfTaxInvoiceReimbAmt, string fY1_FirstHalfTaxInvoiceDatePeriod, Nullable<decimal> fY1_FirstHalfTaxInvoiceTotalTaxBill, Nullable<int> fY1_FirstHalfTaxInvoiceNoOfMonReimb, Nullable<decimal> fY1_FirstHalfTaxInvoiceReimbAmt, Nullable<decimal> fY_TaxBillReceiptTotal, Nullable<int> fY_TaxBillReceiptNoOfMonReimb, Nullable<decimal> fY_TaxBillReceiptReimbAmt, Nullable<decimal> fY_TaxBaseYearReimb, Nullable<decimal> fY_NetAmountReimb, Nullable<decimal> fY_PercOfGovOccupancyReimb, Nullable<decimal> fY_AmountDueLessorReimb, string fY1_SecondHalfTaxInvoiceDatePeriod, Nullable<decimal> fY1_SecondHalfTaxInvoiceTotalTaxBill, Nullable<int> fY1_SecondHalfTaxInvoiceNoOfMonReimb, Nullable<decimal> fY1_SecondHalfTaxInvoiceReimbAmt, string fY2_FirstHalfTaxInvoiceDatePeriod, Nullable<decimal> fY2_FirstHalfTaxInvoiceTotalTaxBill, Nullable<int> fY2_FirstHalfTaxInvoiceNoOfMonReimb, Nullable<decimal> fY2_FirstHalfTaxInvoiceReimbAmt, Nullable<decimal> fY1_TaxBillReceiptTotal, Nullable<int> fY1_TaxBillReceiptNoOfMonReimb, Nullable<decimal> fY1_TaxBillReceiptReimbAmt, Nullable<decimal> fY1_TaxBaseYearReimb, Nullable<decimal> fY1_NetAmountReimb, Nullable<decimal> fY1_PercOfGovOccupancyReimb, Nullable<decimal> fY1_AmountDueLessorReimb, Nullable<decimal> fY2_RETEscalationProjectionNetIncr, Nullable<decimal> fY2_RETEscalationProjectionPercIncr, Nullable<decimal> fY2_RETEscalationProjectionAccr, Nullable<decimal> fY2_RETEscalationProjectionRevNetIncr, Nullable<decimal> fY2_RETEscalationProjectionRevPercIncr, Nullable<decimal> fY2_RETEscalationProjectionRevAccr, Nullable<int> fY_YY, Nullable<int> fY_YY_Est, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate, Nullable<int> stateID, Nullable<int> reasonForDelayID, string otherReasonForDelay)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var leaseEffectiveDateParameter = leaseEffectiveDate.HasValue ?
                new ObjectParameter("LeaseEffectiveDate", leaseEffectiveDate) :
                new ObjectParameter("LeaseEffectiveDate", typeof(System.DateTime));
    
            var annualRentParameter = annualRent.HasValue ?
                new ObjectParameter("AnnualRent", annualRent) :
                new ObjectParameter("AnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var fY_FirstHalfTaxInvoiceDatePeriodParameter = fY_FirstHalfTaxInvoiceDatePeriod != null ?
                new ObjectParameter("FY_FirstHalfTaxInvoiceDatePeriod", fY_FirstHalfTaxInvoiceDatePeriod) :
                new ObjectParameter("FY_FirstHalfTaxInvoiceDatePeriod", typeof(string));
    
            var fY_FirstHalfTaxInvoiceTotalTaxBillParameter = fY_FirstHalfTaxInvoiceTotalTaxBill.HasValue ?
                new ObjectParameter("FY_FirstHalfTaxInvoiceTotalTaxBill", fY_FirstHalfTaxInvoiceTotalTaxBill) :
                new ObjectParameter("FY_FirstHalfTaxInvoiceTotalTaxBill", typeof(decimal));
    
            var fY_FirstHalfTaxInvoiceNoOfMonReimbParameter = fY_FirstHalfTaxInvoiceNoOfMonReimb.HasValue ?
                new ObjectParameter("FY_FirstHalfTaxInvoiceNoOfMonReimb", fY_FirstHalfTaxInvoiceNoOfMonReimb) :
                new ObjectParameter("FY_FirstHalfTaxInvoiceNoOfMonReimb", typeof(int));
    
            var fY_FirstHalfTaxInvoiceReimbAmtParameter = fY_FirstHalfTaxInvoiceReimbAmt.HasValue ?
                new ObjectParameter("FY_FirstHalfTaxInvoiceReimbAmt", fY_FirstHalfTaxInvoiceReimbAmt) :
                new ObjectParameter("FY_FirstHalfTaxInvoiceReimbAmt", typeof(decimal));
    
            var fY_SecondHalfTaxInvoiceDatePeriodParameter = fY_SecondHalfTaxInvoiceDatePeriod != null ?
                new ObjectParameter("FY_SecondHalfTaxInvoiceDatePeriod", fY_SecondHalfTaxInvoiceDatePeriod) :
                new ObjectParameter("FY_SecondHalfTaxInvoiceDatePeriod", typeof(string));
    
            var fY_SecondHalfTaxInvoiceTotalTaxBillParameter = fY_SecondHalfTaxInvoiceTotalTaxBill.HasValue ?
                new ObjectParameter("FY_SecondHalfTaxInvoiceTotalTaxBill", fY_SecondHalfTaxInvoiceTotalTaxBill) :
                new ObjectParameter("FY_SecondHalfTaxInvoiceTotalTaxBill", typeof(decimal));
    
            var fY_SecondHalfTaxInvoiceNoOfMonReimbParameter = fY_SecondHalfTaxInvoiceNoOfMonReimb.HasValue ?
                new ObjectParameter("FY_SecondHalfTaxInvoiceNoOfMonReimb", fY_SecondHalfTaxInvoiceNoOfMonReimb) :
                new ObjectParameter("FY_SecondHalfTaxInvoiceNoOfMonReimb", typeof(int));
    
            var fY_SecondHalfTaxInvoiceReimbAmtParameter = fY_SecondHalfTaxInvoiceReimbAmt.HasValue ?
                new ObjectParameter("FY_SecondHalfTaxInvoiceReimbAmt", fY_SecondHalfTaxInvoiceReimbAmt) :
                new ObjectParameter("FY_SecondHalfTaxInvoiceReimbAmt", typeof(decimal));
    
            var fY1_FirstHalfTaxInvoiceDatePeriodParameter = fY1_FirstHalfTaxInvoiceDatePeriod != null ?
                new ObjectParameter("FY1_FirstHalfTaxInvoiceDatePeriod", fY1_FirstHalfTaxInvoiceDatePeriod) :
                new ObjectParameter("FY1_FirstHalfTaxInvoiceDatePeriod", typeof(string));
    
            var fY1_FirstHalfTaxInvoiceTotalTaxBillParameter = fY1_FirstHalfTaxInvoiceTotalTaxBill.HasValue ?
                new ObjectParameter("FY1_FirstHalfTaxInvoiceTotalTaxBill", fY1_FirstHalfTaxInvoiceTotalTaxBill) :
                new ObjectParameter("FY1_FirstHalfTaxInvoiceTotalTaxBill", typeof(decimal));
    
            var fY1_FirstHalfTaxInvoiceNoOfMonReimbParameter = fY1_FirstHalfTaxInvoiceNoOfMonReimb.HasValue ?
                new ObjectParameter("FY1_FirstHalfTaxInvoiceNoOfMonReimb", fY1_FirstHalfTaxInvoiceNoOfMonReimb) :
                new ObjectParameter("FY1_FirstHalfTaxInvoiceNoOfMonReimb", typeof(int));
    
            var fY1_FirstHalfTaxInvoiceReimbAmtParameter = fY1_FirstHalfTaxInvoiceReimbAmt.HasValue ?
                new ObjectParameter("FY1_FirstHalfTaxInvoiceReimbAmt", fY1_FirstHalfTaxInvoiceReimbAmt) :
                new ObjectParameter("FY1_FirstHalfTaxInvoiceReimbAmt", typeof(decimal));
    
            var fY_TaxBillReceiptTotalParameter = fY_TaxBillReceiptTotal.HasValue ?
                new ObjectParameter("FY_TaxBillReceiptTotal", fY_TaxBillReceiptTotal) :
                new ObjectParameter("FY_TaxBillReceiptTotal", typeof(decimal));
    
            var fY_TaxBillReceiptNoOfMonReimbParameter = fY_TaxBillReceiptNoOfMonReimb.HasValue ?
                new ObjectParameter("FY_TaxBillReceiptNoOfMonReimb", fY_TaxBillReceiptNoOfMonReimb) :
                new ObjectParameter("FY_TaxBillReceiptNoOfMonReimb", typeof(int));
    
            var fY_TaxBillReceiptReimbAmtParameter = fY_TaxBillReceiptReimbAmt.HasValue ?
                new ObjectParameter("FY_TaxBillReceiptReimbAmt", fY_TaxBillReceiptReimbAmt) :
                new ObjectParameter("FY_TaxBillReceiptReimbAmt", typeof(decimal));
    
            var fY_TaxBaseYearReimbParameter = fY_TaxBaseYearReimb.HasValue ?
                new ObjectParameter("FY_TaxBaseYearReimb", fY_TaxBaseYearReimb) :
                new ObjectParameter("FY_TaxBaseYearReimb", typeof(decimal));
    
            var fY_NetAmountReimbParameter = fY_NetAmountReimb.HasValue ?
                new ObjectParameter("FY_NetAmountReimb", fY_NetAmountReimb) :
                new ObjectParameter("FY_NetAmountReimb", typeof(decimal));
    
            var fY_PercOfGovOccupancyReimbParameter = fY_PercOfGovOccupancyReimb.HasValue ?
                new ObjectParameter("FY_PercOfGovOccupancyReimb", fY_PercOfGovOccupancyReimb) :
                new ObjectParameter("FY_PercOfGovOccupancyReimb", typeof(decimal));
    
            var fY_AmountDueLessorReimbParameter = fY_AmountDueLessorReimb.HasValue ?
                new ObjectParameter("FY_AmountDueLessorReimb", fY_AmountDueLessorReimb) :
                new ObjectParameter("FY_AmountDueLessorReimb", typeof(decimal));
    
            var fY1_SecondHalfTaxInvoiceDatePeriodParameter = fY1_SecondHalfTaxInvoiceDatePeriod != null ?
                new ObjectParameter("FY1_SecondHalfTaxInvoiceDatePeriod", fY1_SecondHalfTaxInvoiceDatePeriod) :
                new ObjectParameter("FY1_SecondHalfTaxInvoiceDatePeriod", typeof(string));
    
            var fY1_SecondHalfTaxInvoiceTotalTaxBillParameter = fY1_SecondHalfTaxInvoiceTotalTaxBill.HasValue ?
                new ObjectParameter("FY1_SecondHalfTaxInvoiceTotalTaxBill", fY1_SecondHalfTaxInvoiceTotalTaxBill) :
                new ObjectParameter("FY1_SecondHalfTaxInvoiceTotalTaxBill", typeof(decimal));
    
            var fY1_SecondHalfTaxInvoiceNoOfMonReimbParameter = fY1_SecondHalfTaxInvoiceNoOfMonReimb.HasValue ?
                new ObjectParameter("FY1_SecondHalfTaxInvoiceNoOfMonReimb", fY1_SecondHalfTaxInvoiceNoOfMonReimb) :
                new ObjectParameter("FY1_SecondHalfTaxInvoiceNoOfMonReimb", typeof(int));
    
            var fY1_SecondHalfTaxInvoiceReimbAmtParameter = fY1_SecondHalfTaxInvoiceReimbAmt.HasValue ?
                new ObjectParameter("FY1_SecondHalfTaxInvoiceReimbAmt", fY1_SecondHalfTaxInvoiceReimbAmt) :
                new ObjectParameter("FY1_SecondHalfTaxInvoiceReimbAmt", typeof(decimal));
    
            var fY2_FirstHalfTaxInvoiceDatePeriodParameter = fY2_FirstHalfTaxInvoiceDatePeriod != null ?
                new ObjectParameter("FY2_FirstHalfTaxInvoiceDatePeriod", fY2_FirstHalfTaxInvoiceDatePeriod) :
                new ObjectParameter("FY2_FirstHalfTaxInvoiceDatePeriod", typeof(string));
    
            var fY2_FirstHalfTaxInvoiceTotalTaxBillParameter = fY2_FirstHalfTaxInvoiceTotalTaxBill.HasValue ?
                new ObjectParameter("FY2_FirstHalfTaxInvoiceTotalTaxBill", fY2_FirstHalfTaxInvoiceTotalTaxBill) :
                new ObjectParameter("FY2_FirstHalfTaxInvoiceTotalTaxBill", typeof(decimal));
    
            var fY2_FirstHalfTaxInvoiceNoOfMonReimbParameter = fY2_FirstHalfTaxInvoiceNoOfMonReimb.HasValue ?
                new ObjectParameter("FY2_FirstHalfTaxInvoiceNoOfMonReimb", fY2_FirstHalfTaxInvoiceNoOfMonReimb) :
                new ObjectParameter("FY2_FirstHalfTaxInvoiceNoOfMonReimb", typeof(int));
    
            var fY2_FirstHalfTaxInvoiceReimbAmtParameter = fY2_FirstHalfTaxInvoiceReimbAmt.HasValue ?
                new ObjectParameter("FY2_FirstHalfTaxInvoiceReimbAmt", fY2_FirstHalfTaxInvoiceReimbAmt) :
                new ObjectParameter("FY2_FirstHalfTaxInvoiceReimbAmt", typeof(decimal));
    
            var fY1_TaxBillReceiptTotalParameter = fY1_TaxBillReceiptTotal.HasValue ?
                new ObjectParameter("FY1_TaxBillReceiptTotal", fY1_TaxBillReceiptTotal) :
                new ObjectParameter("FY1_TaxBillReceiptTotal", typeof(decimal));
    
            var fY1_TaxBillReceiptNoOfMonReimbParameter = fY1_TaxBillReceiptNoOfMonReimb.HasValue ?
                new ObjectParameter("FY1_TaxBillReceiptNoOfMonReimb", fY1_TaxBillReceiptNoOfMonReimb) :
                new ObjectParameter("FY1_TaxBillReceiptNoOfMonReimb", typeof(int));
    
            var fY1_TaxBillReceiptReimbAmtParameter = fY1_TaxBillReceiptReimbAmt.HasValue ?
                new ObjectParameter("FY1_TaxBillReceiptReimbAmt", fY1_TaxBillReceiptReimbAmt) :
                new ObjectParameter("FY1_TaxBillReceiptReimbAmt", typeof(decimal));
    
            var fY1_TaxBaseYearReimbParameter = fY1_TaxBaseYearReimb.HasValue ?
                new ObjectParameter("FY1_TaxBaseYearReimb", fY1_TaxBaseYearReimb) :
                new ObjectParameter("FY1_TaxBaseYearReimb", typeof(decimal));
    
            var fY1_NetAmountReimbParameter = fY1_NetAmountReimb.HasValue ?
                new ObjectParameter("FY1_NetAmountReimb", fY1_NetAmountReimb) :
                new ObjectParameter("FY1_NetAmountReimb", typeof(decimal));
    
            var fY1_PercOfGovOccupancyReimbParameter = fY1_PercOfGovOccupancyReimb.HasValue ?
                new ObjectParameter("FY1_PercOfGovOccupancyReimb", fY1_PercOfGovOccupancyReimb) :
                new ObjectParameter("FY1_PercOfGovOccupancyReimb", typeof(decimal));
    
            var fY1_AmountDueLessorReimbParameter = fY1_AmountDueLessorReimb.HasValue ?
                new ObjectParameter("FY1_AmountDueLessorReimb", fY1_AmountDueLessorReimb) :
                new ObjectParameter("FY1_AmountDueLessorReimb", typeof(decimal));
    
            var fY2_RETEscalationProjectionNetIncrParameter = fY2_RETEscalationProjectionNetIncr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionNetIncr", fY2_RETEscalationProjectionNetIncr) :
                new ObjectParameter("FY2_RETEscalationProjectionNetIncr", typeof(decimal));
    
            var fY2_RETEscalationProjectionPercIncrParameter = fY2_RETEscalationProjectionPercIncr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionPercIncr", fY2_RETEscalationProjectionPercIncr) :
                new ObjectParameter("FY2_RETEscalationProjectionPercIncr", typeof(decimal));
    
            var fY2_RETEscalationProjectionAccrParameter = fY2_RETEscalationProjectionAccr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionAccr", fY2_RETEscalationProjectionAccr) :
                new ObjectParameter("FY2_RETEscalationProjectionAccr", typeof(decimal));
    
            var fY2_RETEscalationProjectionRevNetIncrParameter = fY2_RETEscalationProjectionRevNetIncr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionRevNetIncr", fY2_RETEscalationProjectionRevNetIncr) :
                new ObjectParameter("FY2_RETEscalationProjectionRevNetIncr", typeof(decimal));
    
            var fY2_RETEscalationProjectionRevPercIncrParameter = fY2_RETEscalationProjectionRevPercIncr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionRevPercIncr", fY2_RETEscalationProjectionRevPercIncr) :
                new ObjectParameter("FY2_RETEscalationProjectionRevPercIncr", typeof(decimal));
    
            var fY2_RETEscalationProjectionRevAccrParameter = fY2_RETEscalationProjectionRevAccr.HasValue ?
                new ObjectParameter("FY2_RETEscalationProjectionRevAccr", fY2_RETEscalationProjectionRevAccr) :
                new ObjectParameter("FY2_RETEscalationProjectionRevAccr", typeof(decimal));
    
            var fY_YYParameter = fY_YY.HasValue ?
                new ObjectParameter("FY_YY", fY_YY) :
                new ObjectParameter("FY_YY", typeof(int));
    
            var fY_YY_EstParameter = fY_YY_Est.HasValue ?
                new ObjectParameter("FY_YY_Est", fY_YY_Est) :
                new ObjectParameter("FY_YY_Est", typeof(int));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var reasonForDelayIDParameter = reasonForDelayID.HasValue ?
                new ObjectParameter("ReasonForDelayID", reasonForDelayID) :
                new ObjectParameter("ReasonForDelayID", typeof(int));
    
            var otherReasonForDelayParameter = otherReasonForDelay != null ?
                new ObjectParameter("OtherReasonForDelay", otherReasonForDelay) :
                new ObjectParameter("OtherReasonForDelay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53RET", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, leaseEffectiveDateParameter, annualRentParameter, rSFParameter, fY_FirstHalfTaxInvoiceDatePeriodParameter, fY_FirstHalfTaxInvoiceTotalTaxBillParameter, fY_FirstHalfTaxInvoiceNoOfMonReimbParameter, fY_FirstHalfTaxInvoiceReimbAmtParameter, fY_SecondHalfTaxInvoiceDatePeriodParameter, fY_SecondHalfTaxInvoiceTotalTaxBillParameter, fY_SecondHalfTaxInvoiceNoOfMonReimbParameter, fY_SecondHalfTaxInvoiceReimbAmtParameter, fY1_FirstHalfTaxInvoiceDatePeriodParameter, fY1_FirstHalfTaxInvoiceTotalTaxBillParameter, fY1_FirstHalfTaxInvoiceNoOfMonReimbParameter, fY1_FirstHalfTaxInvoiceReimbAmtParameter, fY_TaxBillReceiptTotalParameter, fY_TaxBillReceiptNoOfMonReimbParameter, fY_TaxBillReceiptReimbAmtParameter, fY_TaxBaseYearReimbParameter, fY_NetAmountReimbParameter, fY_PercOfGovOccupancyReimbParameter, fY_AmountDueLessorReimbParameter, fY1_SecondHalfTaxInvoiceDatePeriodParameter, fY1_SecondHalfTaxInvoiceTotalTaxBillParameter, fY1_SecondHalfTaxInvoiceNoOfMonReimbParameter, fY1_SecondHalfTaxInvoiceReimbAmtParameter, fY2_FirstHalfTaxInvoiceDatePeriodParameter, fY2_FirstHalfTaxInvoiceTotalTaxBillParameter, fY2_FirstHalfTaxInvoiceNoOfMonReimbParameter, fY2_FirstHalfTaxInvoiceReimbAmtParameter, fY1_TaxBillReceiptTotalParameter, fY1_TaxBillReceiptNoOfMonReimbParameter, fY1_TaxBillReceiptReimbAmtParameter, fY1_TaxBaseYearReimbParameter, fY1_NetAmountReimbParameter, fY1_PercOfGovOccupancyReimbParameter, fY1_AmountDueLessorReimbParameter, fY2_RETEscalationProjectionNetIncrParameter, fY2_RETEscalationProjectionPercIncrParameter, fY2_RETEscalationProjectionAccrParameter, fY2_RETEscalationProjectionRevNetIncrParameter, fY2_RETEscalationProjectionRevPercIncrParameter, fY2_RETEscalationProjectionRevAccrParameter, fY_YYParameter, fY_YY_EstParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter, stateIDParameter, reasonForDelayIDParameter, otherReasonForDelayParameter);
        }
    
        public virtual int spUpdateLineBA53StepRent(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<decimal> totalDO, Nullable<int> accrualType, Nullable<int> accrualTypeAction, Nullable<bool> fileContainsSupport, Nullable<bool> priorYearHistoryAttached, Nullable<int> reviewerReasonCode, string remarks, string leaseNumber, string projectNo, Nullable<System.DateTime> effectiveDateOfAction, Nullable<decimal> newProjectedAnnualRent, Nullable<decimal> rSF, Nullable<decimal> establishedOldProjAnnualRent, Nullable<decimal> establishedNewProjAnnualRent, Nullable<decimal> establishedAnnualIncreaseOfAction, Nullable<decimal> establishedMonthlyIncrease, Nullable<System.DateTime> establishedEffectiveDateOfAction, Nullable<int> establishedTotalMonths, Nullable<System.DateTime> establishedFYEndDate, Nullable<decimal> establishedTotalMonthsCatchUp, Nullable<int> establishedNumberDaysProratedMonth, Nullable<int> establishedDaysProrated, Nullable<decimal> establishedTotalDayCatchUp, Nullable<int> fY_YY_Est, Nullable<decimal> establishedTotalCatchUp, Nullable<decimal> oldProjectedAnnualRent, Nullable<decimal> annualIncreaseOfAction, Nullable<decimal> monthlyIncrease, Nullable<int> totalMonths, Nullable<System.DateTime> currAuditEndDate, Nullable<decimal> totalMonthsCatchUp, Nullable<int> numberDaysProratedMonth, Nullable<int> daysProrated, Nullable<decimal> totalDayCatchUp, Nullable<int> fY_YY, Nullable<decimal> totalCatchUp, Nullable<System.DateTime> fYEndDate, Nullable<decimal> revisedNewProjAnnualRent, Nullable<decimal> totalDOShouldBe, string teamCode, string sortCode, string signature1, string signature2, Nullable<System.DateTime> signatureDate1, Nullable<System.DateTime> signatureDate2, Nullable<System.DateTime> reportDate, Nullable<System.DateTime> effectiveDateOfAction5)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var totalDOParameter = totalDO.HasValue ?
                new ObjectParameter("TotalDO", totalDO) :
                new ObjectParameter("TotalDO", typeof(decimal));
    
            var accrualTypeParameter = accrualType.HasValue ?
                new ObjectParameter("AccrualType", accrualType) :
                new ObjectParameter("AccrualType", typeof(int));
    
            var accrualTypeActionParameter = accrualTypeAction.HasValue ?
                new ObjectParameter("AccrualTypeAction", accrualTypeAction) :
                new ObjectParameter("AccrualTypeAction", typeof(int));
    
            var fileContainsSupportParameter = fileContainsSupport.HasValue ?
                new ObjectParameter("FileContainsSupport", fileContainsSupport) :
                new ObjectParameter("FileContainsSupport", typeof(bool));
    
            var priorYearHistoryAttachedParameter = priorYearHistoryAttached.HasValue ?
                new ObjectParameter("PriorYearHistoryAttached", priorYearHistoryAttached) :
                new ObjectParameter("PriorYearHistoryAttached", typeof(bool));
    
            var reviewerReasonCodeParameter = reviewerReasonCode.HasValue ?
                new ObjectParameter("ReviewerReasonCode", reviewerReasonCode) :
                new ObjectParameter("ReviewerReasonCode", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var leaseNumberParameter = leaseNumber != null ?
                new ObjectParameter("LeaseNumber", leaseNumber) :
                new ObjectParameter("LeaseNumber", typeof(string));
    
            var projectNoParameter = projectNo != null ?
                new ObjectParameter("ProjectNo", projectNo) :
                new ObjectParameter("ProjectNo", typeof(string));
    
            var effectiveDateOfActionParameter = effectiveDateOfAction.HasValue ?
                new ObjectParameter("EffectiveDateOfAction", effectiveDateOfAction) :
                new ObjectParameter("EffectiveDateOfAction", typeof(System.DateTime));
    
            var newProjectedAnnualRentParameter = newProjectedAnnualRent.HasValue ?
                new ObjectParameter("NewProjectedAnnualRent", newProjectedAnnualRent) :
                new ObjectParameter("NewProjectedAnnualRent", typeof(decimal));
    
            var rSFParameter = rSF.HasValue ?
                new ObjectParameter("RSF", rSF) :
                new ObjectParameter("RSF", typeof(decimal));
    
            var establishedOldProjAnnualRentParameter = establishedOldProjAnnualRent.HasValue ?
                new ObjectParameter("EstablishedOldProjAnnualRent", establishedOldProjAnnualRent) :
                new ObjectParameter("EstablishedOldProjAnnualRent", typeof(decimal));
    
            var establishedNewProjAnnualRentParameter = establishedNewProjAnnualRent.HasValue ?
                new ObjectParameter("EstablishedNewProjAnnualRent", establishedNewProjAnnualRent) :
                new ObjectParameter("EstablishedNewProjAnnualRent", typeof(decimal));
    
            var establishedAnnualIncreaseOfActionParameter = establishedAnnualIncreaseOfAction.HasValue ?
                new ObjectParameter("EstablishedAnnualIncreaseOfAction", establishedAnnualIncreaseOfAction) :
                new ObjectParameter("EstablishedAnnualIncreaseOfAction", typeof(decimal));
    
            var establishedMonthlyIncreaseParameter = establishedMonthlyIncrease.HasValue ?
                new ObjectParameter("EstablishedMonthlyIncrease", establishedMonthlyIncrease) :
                new ObjectParameter("EstablishedMonthlyIncrease", typeof(decimal));
    
            var establishedEffectiveDateOfActionParameter = establishedEffectiveDateOfAction.HasValue ?
                new ObjectParameter("EstablishedEffectiveDateOfAction", establishedEffectiveDateOfAction) :
                new ObjectParameter("EstablishedEffectiveDateOfAction", typeof(System.DateTime));
    
            var establishedTotalMonthsParameter = establishedTotalMonths.HasValue ?
                new ObjectParameter("EstablishedTotalMonths", establishedTotalMonths) :
                new ObjectParameter("EstablishedTotalMonths", typeof(int));
    
            var establishedFYEndDateParameter = establishedFYEndDate.HasValue ?
                new ObjectParameter("EstablishedFYEndDate", establishedFYEndDate) :
                new ObjectParameter("EstablishedFYEndDate", typeof(System.DateTime));
    
            var establishedTotalMonthsCatchUpParameter = establishedTotalMonthsCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalMonthsCatchUp", establishedTotalMonthsCatchUp) :
                new ObjectParameter("EstablishedTotalMonthsCatchUp", typeof(decimal));
    
            var establishedNumberDaysProratedMonthParameter = establishedNumberDaysProratedMonth.HasValue ?
                new ObjectParameter("EstablishedNumberDaysProratedMonth", establishedNumberDaysProratedMonth) :
                new ObjectParameter("EstablishedNumberDaysProratedMonth", typeof(int));
    
            var establishedDaysProratedParameter = establishedDaysProrated.HasValue ?
                new ObjectParameter("EstablishedDaysProrated", establishedDaysProrated) :
                new ObjectParameter("EstablishedDaysProrated", typeof(int));
    
            var establishedTotalDayCatchUpParameter = establishedTotalDayCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalDayCatchUp", establishedTotalDayCatchUp) :
                new ObjectParameter("EstablishedTotalDayCatchUp", typeof(decimal));
    
            var fY_YY_EstParameter = fY_YY_Est.HasValue ?
                new ObjectParameter("FY_YY_Est", fY_YY_Est) :
                new ObjectParameter("FY_YY_Est", typeof(int));
    
            var establishedTotalCatchUpParameter = establishedTotalCatchUp.HasValue ?
                new ObjectParameter("EstablishedTotalCatchUp", establishedTotalCatchUp) :
                new ObjectParameter("EstablishedTotalCatchUp", typeof(decimal));
    
            var oldProjectedAnnualRentParameter = oldProjectedAnnualRent.HasValue ?
                new ObjectParameter("OldProjectedAnnualRent", oldProjectedAnnualRent) :
                new ObjectParameter("OldProjectedAnnualRent", typeof(decimal));
    
            var annualIncreaseOfActionParameter = annualIncreaseOfAction.HasValue ?
                new ObjectParameter("AnnualIncreaseOfAction", annualIncreaseOfAction) :
                new ObjectParameter("AnnualIncreaseOfAction", typeof(decimal));
    
            var monthlyIncreaseParameter = monthlyIncrease.HasValue ?
                new ObjectParameter("MonthlyIncrease", monthlyIncrease) :
                new ObjectParameter("MonthlyIncrease", typeof(decimal));
    
            var totalMonthsParameter = totalMonths.HasValue ?
                new ObjectParameter("TotalMonths", totalMonths) :
                new ObjectParameter("TotalMonths", typeof(int));
    
            var currAuditEndDateParameter = currAuditEndDate.HasValue ?
                new ObjectParameter("CurrAuditEndDate", currAuditEndDate) :
                new ObjectParameter("CurrAuditEndDate", typeof(System.DateTime));
    
            var totalMonthsCatchUpParameter = totalMonthsCatchUp.HasValue ?
                new ObjectParameter("TotalMonthsCatchUp", totalMonthsCatchUp) :
                new ObjectParameter("TotalMonthsCatchUp", typeof(decimal));
    
            var numberDaysProratedMonthParameter = numberDaysProratedMonth.HasValue ?
                new ObjectParameter("NumberDaysProratedMonth", numberDaysProratedMonth) :
                new ObjectParameter("NumberDaysProratedMonth", typeof(int));
    
            var daysProratedParameter = daysProrated.HasValue ?
                new ObjectParameter("DaysProrated", daysProrated) :
                new ObjectParameter("DaysProrated", typeof(int));
    
            var totalDayCatchUpParameter = totalDayCatchUp.HasValue ?
                new ObjectParameter("TotalDayCatchUp", totalDayCatchUp) :
                new ObjectParameter("TotalDayCatchUp", typeof(decimal));
    
            var fY_YYParameter = fY_YY.HasValue ?
                new ObjectParameter("FY_YY", fY_YY) :
                new ObjectParameter("FY_YY", typeof(int));
    
            var totalCatchUpParameter = totalCatchUp.HasValue ?
                new ObjectParameter("TotalCatchUp", totalCatchUp) :
                new ObjectParameter("TotalCatchUp", typeof(decimal));
    
            var fYEndDateParameter = fYEndDate.HasValue ?
                new ObjectParameter("FYEndDate", fYEndDate) :
                new ObjectParameter("FYEndDate", typeof(System.DateTime));
    
            var revisedNewProjAnnualRentParameter = revisedNewProjAnnualRent.HasValue ?
                new ObjectParameter("RevisedNewProjAnnualRent", revisedNewProjAnnualRent) :
                new ObjectParameter("RevisedNewProjAnnualRent", typeof(decimal));
    
            var totalDOShouldBeParameter = totalDOShouldBe.HasValue ?
                new ObjectParameter("TotalDOShouldBe", totalDOShouldBe) :
                new ObjectParameter("TotalDOShouldBe", typeof(decimal));
    
            var teamCodeParameter = teamCode != null ?
                new ObjectParameter("TeamCode", teamCode) :
                new ObjectParameter("TeamCode", typeof(string));
    
            var sortCodeParameter = sortCode != null ?
                new ObjectParameter("SortCode", sortCode) :
                new ObjectParameter("SortCode", typeof(string));
    
            var signature1Parameter = signature1 != null ?
                new ObjectParameter("Signature1", signature1) :
                new ObjectParameter("Signature1", typeof(string));
    
            var signature2Parameter = signature2 != null ?
                new ObjectParameter("Signature2", signature2) :
                new ObjectParameter("Signature2", typeof(string));
    
            var signatureDate1Parameter = signatureDate1.HasValue ?
                new ObjectParameter("SignatureDate1", signatureDate1) :
                new ObjectParameter("SignatureDate1", typeof(System.DateTime));
    
            var signatureDate2Parameter = signatureDate2.HasValue ?
                new ObjectParameter("SignatureDate2", signatureDate2) :
                new ObjectParameter("SignatureDate2", typeof(System.DateTime));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var effectiveDateOfAction5Parameter = effectiveDateOfAction5.HasValue ?
                new ObjectParameter("EffectiveDateOfAction5", effectiveDateOfAction5) :
                new ObjectParameter("EffectiveDateOfAction5", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineBA53StepRent", oItemIDParameter, lineNumParameter, totalDOParameter, accrualTypeParameter, accrualTypeActionParameter, fileContainsSupportParameter, priorYearHistoryAttachedParameter, reviewerReasonCodeParameter, remarksParameter, leaseNumberParameter, projectNoParameter, effectiveDateOfActionParameter, newProjectedAnnualRentParameter, rSFParameter, establishedOldProjAnnualRentParameter, establishedNewProjAnnualRentParameter, establishedAnnualIncreaseOfActionParameter, establishedMonthlyIncreaseParameter, establishedEffectiveDateOfActionParameter, establishedTotalMonthsParameter, establishedFYEndDateParameter, establishedTotalMonthsCatchUpParameter, establishedNumberDaysProratedMonthParameter, establishedDaysProratedParameter, establishedTotalDayCatchUpParameter, fY_YY_EstParameter, establishedTotalCatchUpParameter, oldProjectedAnnualRentParameter, annualIncreaseOfActionParameter, monthlyIncreaseParameter, totalMonthsParameter, currAuditEndDateParameter, totalMonthsCatchUpParameter, numberDaysProratedMonthParameter, daysProratedParameter, totalDayCatchUpParameter, fY_YYParameter, totalCatchUpParameter, fYEndDateParameter, revisedNewProjAnnualRentParameter, totalDOShouldBeParameter, teamCodeParameter, sortCodeParameter, signature1Parameter, signature2Parameter, signatureDate1Parameter, signatureDate2Parameter, reportDateParameter, effectiveDateOfAction5Parameter);
        }
    
        public virtual int spUpdateLineNumDetails(Nullable<int> oItemID, Nullable<int> lineNum, Nullable<int> valid, string comments, ObjectParameter justification, string justificationAddOn, string justificationOther, string code, string codeComment, Nullable<int> updateUser)
        {
            var oItemIDParameter = oItemID.HasValue ?
                new ObjectParameter("OItemID", oItemID) :
                new ObjectParameter("OItemID", typeof(int));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("Valid", valid) :
                new ObjectParameter("Valid", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var justificationAddOnParameter = justificationAddOn != null ?
                new ObjectParameter("JustificationAddOn", justificationAddOn) :
                new ObjectParameter("JustificationAddOn", typeof(string));
    
            var justificationOtherParameter = justificationOther != null ?
                new ObjectParameter("JustificationOther", justificationOther) :
                new ObjectParameter("JustificationOther", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var codeCommentParameter = codeComment != null ?
                new ObjectParameter("CodeComment", codeComment) :
                new ObjectParameter("CodeComment", typeof(string));
    
            var updateUserParameter = updateUser.HasValue ?
                new ObjectParameter("UpdateUser", updateUser) :
                new ObjectParameter("UpdateUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineNumDetails", oItemIDParameter, lineNumParameter, validParameter, commentsParameter, justification, justificationAddOnParameter, justificationOtherParameter, codeParameter, codeCommentParameter, updateUserParameter);
        }
    
        public virtual int spUpdateLineRWA(string docNumber, Nullable<int> lineNum, string rWA)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var lineNumParameter = lineNum.HasValue ?
                new ObjectParameter("LineNum", lineNum) :
                new ObjectParameter("LineNum", typeof(int));
    
            var rWAParameter = rWA != null ?
                new ObjectParameter("RWA", rWA) :
                new ObjectParameter("RWA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLineRWA", docNumberParameter, lineNumParameter, rWAParameter);
        }
    
        public virtual int spUpdateLoadArchiveDate(Nullable<int> loadID, Nullable<System.DateTime> archiveDate)
        {
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            var archiveDateParameter = archiveDate.HasValue ?
                new ObjectParameter("ArchiveDate", archiveDate) :
                new ObjectParameter("ArchiveDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateLoadArchiveDate", loadIDParameter, archiveDateParameter);
        }
    
        public virtual int spUpdateSendAttachment(string docNumber, string docArray, Nullable<int> loadID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docArrayParameter = docArray != null ?
                new ObjectParameter("DocArray", docArray) :
                new ObjectParameter("DocArray", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSendAttachment", docNumberParameter, docArrayParameter, loadIDParameter);
        }
    
        public virtual int spUpdateSendAttForRevision(string docNumber, string docArray, Nullable<int> loadID)
        {
            var docNumberParameter = docNumber != null ?
                new ObjectParameter("DocNumber", docNumber) :
                new ObjectParameter("DocNumber", typeof(string));
    
            var docArrayParameter = docArray != null ?
                new ObjectParameter("DocArray", docArray) :
                new ObjectParameter("DocArray", typeof(string));
    
            var loadIDParameter = loadID.HasValue ?
                new ObjectParameter("LoadID", loadID) :
                new ObjectParameter("LoadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateSendAttForRevision", docNumberParameter, docArrayParameter, loadIDParameter);
        }
    
        public virtual int spVerifyItemReroute(Nullable<int> requestID, Nullable<int> status, ObjectParameter returnCode)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spVerifyItemReroute", requestIDParameter, statusParameter, returnCode);
        }
    }
}
