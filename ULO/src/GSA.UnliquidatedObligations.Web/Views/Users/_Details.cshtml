@using GSA.UnliquidatedObligations.BusinessLayer.Authorization
@using GSA.UnliquidatedObligations.Web.Controllers
@model GSA.UnliquidatedObligations.Web.Models.UserModel
@{
    var createMode = Model.UserId == null;
    var canMakeChanges = User.HasPermission(ApplicationPermissionNames.ManageUsers);
    var readonlyHtmlAttributes = new { @readonly = "readonly" };
    var disabledHtmlAttributes = new { @disabled = "disabled" };
    var textboxHtmlAttributes = canMakeChanges ? (object) new { } : (object) readonlyHtmlAttributes;
    var checkboxHtmlAttributes = canMakeChanges ? (object)new { } : (object) disabledHtmlAttributes;
    var groupNameSelectItems = ((IList<string>)ViewBag.GroupNames).ConvertToSelectList();
    var applicationPermissionSelectItems = PortalHelpers.ConvertNamesToSelectList<ApplicationPermissionNames>();
}
@using (Html.BeginForm(UsersController.ActionNames.Save, UsersController.Name, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(Model => Model.UserId)
    <div>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.UserName)
            </div>
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.UserName, textboxHtmlAttributes)
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.Email)
            </div>
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.Email, textboxHtmlAttributes)
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.UserType)
            </div>
            <div class="col-sm-10">
                @if (createMode)
                {
                    @Html.DropDownListFor(z => z.UserType, PortalHelpers.CreateUserTypesSelectListItems(), AspHelpers.PleaseSelectOne)
                }
                else
                {
                    @Html.TextBoxFor(model => model.UserType, textboxHtmlAttributes)
                }
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                Group Membership Regions
            </div>
            <div class="col-sm-10">
                @Html.ListBoxFor(z=>z.GroupMembershipRegionIds, PortalHelpers.CreateRegionSelectListItems(), canMakeChanges ? (object) new { size=12 } : (object)new { size = 12, @disabled = "disabled" })
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.Groups)
            </div>
            <div class="col-sm-10">
                @Html.CheckBoxListFor(z => z.Groups, groupNameSelectItems, htmlAttributes: checkboxHtmlAttributes)
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.Permissions)
            </div>
            <div class="col-sm-10">
                @Html.CheckBoxListFor(z => z.Permissions, applicationPermissionSelectItems, htmlAttributes: checkboxHtmlAttributes)
            </div>
        </div>
        <div class="form-row">
            <div class="col-sm-2">
                @Html.DisplayNameFor(model => model.Claims)
            </div>
            <div class="col-sm-10">
                <table class="table table-responsive users-data" id="SCClaimsTable">
                    <thead>
                        <tr>
                            <th>Doc Type</th>
                            <th>BA Code</th>
                            <th>Org Code</th>
                            <th>Region</th>
                            <th></th>
                        </tr>
                    </thead>
                    @foreach (var claim in Model.SubjectCategoryClaims)
                    {
                        <tr>
                            <td>@Html.TextBox("scc.docType", claim.DocumentType, readonlyHtmlAttributes)</td>
                            <td>@Html.TextBox("scc.bacode", claim.BACode, readonlyHtmlAttributes)</td>
                            <td>@Html.TextBox("scc.orgcode", claim.OrgCode, readonlyHtmlAttributes)</td>
                            <td>@Html.TextBox("scc.region", claim.Region, readonlyHtmlAttributes)</td>
                            <td>
@if (canMakeChanges)
{
                                <a href="#" onclick="DeleteMyRow(event, this)">Delete</a>
}
                            </td>
                        </tr>
                    }
                </table>
@if (canMakeChanges)
{
                <button type="button" class="btn" onclick="AddNewClaim(event)">Add New Claim</button>
}
            </div>
        </div>
    </div>

    if (canMakeChanges)
    {
    <p>
        <button type="submit" class="btn btn-primary">@ViewBag.SubmitButtonText</button>
    </p>
    }
}

<table class="hidden" id="SCClaimTemplateRowContainer">
    <tr>
        <td>@Html.DropDownList("scc.docType", PortalHelpers.CreateDocumentTypeSelectListItems())</td>
        <td><input type="text" name="scc.bacode" required="required" maxlength="4" /></td>
        <td><input type="text" name="scc.orgcode" required="required" maxlength="8" /></td>
        <td>@Html.DropDownList("scc.region", PortalHelpers.CreateRegionSelectListItems(true))</td>
        <td><a href="#" onclick="DeleteMyRow(event, this)">Delete</a></td>
    </tr>
</table>

<script type="text/javascript">
    function DeleteMyRow(event, el) {
        //alert("DeleteMyRow " + event + " " + el.tagName + " " + el.parentElement.tagName);
        while (el != null && el.tagName != "TR") {
            el = el.parentElement;
        }
        if (el != null) {
            //alert(el.parentElement.tagName + " removing " + el.tagName);
            el.parentElement.removeChild(el);
        }
        event.stopPropagation();
        return false;
    }
    function AddNewClaim(event) {
        //alert("adding");
        var template = $("#SCClaimTemplateRowContainer").children(0);
        //alert(template.html());
        template.clone().appendTo("#SCClaimsTable");
        event.stopPropagation();
        return false;
    }
</script>
